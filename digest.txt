Directory structure:
└── wpp/
    ├── README.md
    ├── components.json
    ├── eslint.config.js
    ├── index.html
    ├── jsconfig.json
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.js
    ├── vercel.json
    ├── vite.config.js
    ├── public/
    │   └── .DS_Store
    └── src/
        ├── App.css
        ├── App.jsx
        ├── index.css
        ├── main.jsx
        ├── supabaseConfig.js
        ├── assets/
        ├── components/
        │   ├── Home.css
        │   ├── Home.jsx
        │   ├── LoginSignupPage.jsx
        │   └── ui/
        │       ├── LandingPage.jsx
        │       ├── button.css
        │       ├── button.jsx
        │       ├── dialog.css
        │       ├── dialog.jsx
        │       ├── hover-border-gradient.jsx
        │       ├── input.css
        │       ├── input.jsx
        │       ├── loader.css
        │       ├── loader.jsx
        │       ├── select.css
        │       ├── select.jsx
        │       ├── table.css
        │       ├── table.jsx
        │       └── .DS_Store
        ├── lib/
        │   └── utils.js
        └── utils/

================================================
File: README.md
================================================
ProximaLink is a knowledge base that allows you to search for links and get summaries of the content.# compendium



================================================
File: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": false,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}


================================================
File: eslint.config.js
================================================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]



================================================
File: index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <link rel="icon" type="image/png" href="/compendium.png">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Compendium</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>



================================================
File: jsconfig.json
================================================
{
    "compilerOptions": {
      // ...
      "baseUrl": ".",
      "paths": {
        "@/*": [
          "./src/*"
        ]
      }
      // ...
    }
  }


================================================
File: package.json
================================================
{
  "name": "compendiun",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@google/generative-ai": "^0.21.0",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-slot": "^1.1.0",
    "@supabase/supabase-js": "^2.46.2",
    "axios": "^1.7.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.6.3",
    "gsap": "^3.12.7",
    "lucide-react": "^0.462.0",
    "motion": "^12.6.3",
    "react": "^18.3.1",
    "react-confetti": "^6.4.0",
    "react-dom": "^18.3.1",
    "react-lottie": "^1.2.10",
    "react-router-dom": "^6.30.0",
    "react-scroll": "^1.9.3",
    "react-toastify": "^11.0.5",
    "styled-components": "^6.1.17",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.15",
    "vite": "^6.0.1"
  }
}



================================================
File: postcss.config.js
================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



================================================
File: tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
export default {
    darkMode: ["class"],
    content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
  	extend: {
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		animation: {
  			'shimmer-slide': 'shimmer-slide var(--speed) ease-in-out infinite alternate',
  			'spin-around': 'spin-around calc(var(--speed) * 2) infinite linear'
  		},
  		keyframes: {
  			'shimmer-slide': {
  				to: {
  					transform: 'translate(calc(100cqw - 100%), 0)'
  				}
  			},
  			'spin-around': {
  				'0%': {
  					transform: 'translateZ(0) rotate(0)'
  				},
  				'15%, 35%': {
  					transform: 'translateZ(0) rotate(90deg)'
  				},
  				'65%, 85%': {
  					transform: 'translateZ(0) rotate(270deg)'
  				},
  				'100%': {
  					transform: 'translateZ(0) rotate(360deg)'
  				}
  			}
  		},
  		backgroundImage: {
  			'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
  		},
  	}
  },
  plugins: [import("tailwindcss-animate")],
}


================================================
File: vercel.json
================================================
{
    "rewrites": [{ "source": "/(.*)", "destination": "/" }]
}


================================================
File: vite.config.js
================================================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
})


================================================
File: public/.DS_Store
================================================
[Non-text file]


================================================
File: src/App.css
================================================
.auth-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #1a1a1a; /* Dark background for black theme */
}

.auth-form {
  background: #2e2e2e; /* Darker shade for form background */
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Slightly darker shadow */
  max-width: 400px;
  width: 100%;
}

.auth-title {
  margin-bottom: 1rem;
  font-size: 1.5rem;
  text-align: center;
  color: #d1c4e9; /* Light purple for text */
}

.auth-input {
  width: 100%;
  padding: 0.5rem;
  margin-bottom: 1rem;
  border: 1px solid #7e57c2; /* Purple border */
  border-radius: 4px;
  background-color: #1a1a1a; /* Dark input background */
  color: #d1c4e9; /* Light purple text */
}

.auth-button {
  width: 100%;
  padding: 0.75rem;
  background-color: #7e57c2; /* Purple button */
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
}

.auth-button:hover {
  background-color: #5e35b1; /* Darker purple on hover */
}



================================================
File: src/App.jsx
================================================
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import LoginSignupPage from './components/LoginSignupPage';
import LandingPage from './components/ui/LandingPage';
import RawHomePage from './components/Home';

import './App.css';

function App() {
  // No authentication state needed for this simple routing setup

  return (
    <BrowserRouter>
      <Routes>
        {/* Default route redirects to login */}
        <Route path="/" element={<Navigate to="/login" replace />} />

        {/* Route for the login page */}
        <Route path="/login" element={<LoginSignupPage />} />

        {/* Route for the landing page */}
        <Route path="/landing" element={<LandingPage />} />

        {/* Route for the raw home page (assuming this is the intended 'Home') */}
        <Route path="/home" element={<RawHomePage />} />
        {/* Catch-all for unmatched routes */}
        <Route path="*" element={<Navigate to="/login" replace />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;



================================================
File: src/index.css
================================================
/* src/index.css */
@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* --- FONT --- */
    --font-sans: 'IBM Plex Mono', monospace; /* Default font */

    /* --- COLOR VARIABLES --- */
    --background: 240 10% 4%;
    --foreground: 0 0% 100%;
    --border: 240 4% 28%; /* Slightly lighter border */
    --muted: 240 4% 18%;
    --muted-foreground: 240 5% 70%;
    --accent: 255 80% 70%; /* Brighter Purple: #b380ff */
    --accent-hover: 255 85% 75%;
    --input-bg: 240 5% 12%;
    --radius: 6px;
    --ring: 255 80% 75%;
    --custom-purple: #8483ec;
    --custom-purple-darker: #6366f1;
    --highlight-purple: #8a2be2; /* Used by HoverBorderGradient default */
    --section-bg: #0f0f0f; /* Defining a common section/element bg */
  }
  .light { /* ... */ }
}

@layer base {
  * { @apply border-border; box-sizing: border-box; }
  html { scroll-behavior: smooth; }
  body {
    @apply bg-background text-foreground;
    font-family: var(--font-sans);
    font-weight: 400;
    font-size: 16px; /* Setting a base font size for rem calculation */
    line-height: 1.6; /* Improve default line spacing */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    margin: 0; padding: 0;
    color: hsl(var(--foreground));
  }
  /* Base heading/button weight */
  h1, h2, h3, h4, h5, h6, button, strong, b {
      font-weight: 500;
  }
  /* Ensure interactive elements inherit font */
  button, input, textarea, select {
      font-family: inherit; /* Inherit from body */
  }

  /* General paragraph styling */
  p {
      @apply text-base text-gray-300 leading-relaxed; /* Default p size */
  }
  /* Adjust list item size */
  li {
      @apply text-sm;
  }
}


================================================
File: src/main.jsx
================================================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)



================================================
File: src/supabaseConfig.js
================================================
import { createClient } from '@supabase/supabase-js'
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseKey = import.meta.env.VITE_SUPABASE_KEY
const supabase = createClient(supabaseUrl, supabaseKey)

export default supabase



================================================
File: src/components/Home.css
================================================
/* src/components/Home.css */

/* Inherits body styles */
a { color: hsl(var(--accent)); text-decoration: none; transition: color 0.2s ease; }
a:hover { color: hsl(var(--accent-hover)); }

/* Page Wrapper & Background Effects */
.home-page-wrapper {
    position: relative; min-height: 100vh;
    background-color: hsl(var(--background)); /* Base color needed */
    overflow: hidden; /* Contain gradients */
}
/* Mesh Gradients */
.home-page-wrapper::before,
.home-page-wrapper::after {
    content: ""; position: fixed; z-index: -1; border-radius: 50%;
    filter: blur(90px); /* Increased blur */ opacity: 0.18; /* Slightly more visible */
    pointer-events: none;
}
.home-page-wrapper::before { /* Left Gradient */
    width: 450px; height: 450px; left: -180px; top: 5%;
    background: radial-gradient(circle, hsl(var(--accent) / 0.7), transparent 70%);
}
.home-page-wrapper::after { /* Right Gradient */
    width: 550px; height: 550px; right: -220px; bottom: 0%;
    background: radial-gradient(circle, hsl(280, 60%, 65%), transparent 70%); /* Slightly adjusted color */
}

/* Grid Background */
.fixed-grid-background {
  position: fixed; inset: 0; width: 100%; height: 100%;
  z-index: 0; overflow: hidden;
}
.grid-lines {
  position: absolute; inset: 0; opacity: 0.18; /* More visible grid */
  background-image: linear-gradient(hsl(var(--foreground) / 0.35) 1px, transparent 1px), /* Brighter lines */
                    linear-gradient(90deg, hsl(var(--foreground) / 0.35) 1px, transparent 1px);
  background-size: 45px 45px; /* Grid cell size */
  mask-image: radial-gradient(ellipse at center, white 35%, transparent 80%); /* Adjust fade */
}

/* Main Content Container */
.home-container {
  max-width: 1000px; margin: 0 auto;
  padding: 1.5rem 1rem 5rem; position: relative; z-index: 1;
}

/* Header Area */
.home-header {
    display: flex; justify-content: space-between; align-items: center;
    margin-bottom: 2.5rem; padding-top: 1rem; position: relative; z-index: 2;
    flex-wrap: wrap; gap: 1rem;
}
.company-logo-link { display: block; }
.company-logo {
    height: 65px; /* Increased logo size */
    width: auto; display: block; transition: transform 0.3s ease;
}
.company-logo:hover { transform: scale(1.05); }
.home-header .button { padding: 0.5rem 1rem; font-size: 0.85rem; }

/* Main Title Area */
.main-title-area {
    text-align: center;
    margin-bottom: 3rem;
}
.main-title {
    color: hsl(var(--foreground)); /* White */
    font-size: 2.2rem;
    font-weight: 600; /* Bolder */
    letter-spacing: 0.5px;
}
.main-title .highlight { color: hsl(var(--accent)); } /* Purple highlight */

/* Grid Layout Container */
.home-grid-container { display: grid; grid-template-columns: 1fr; gap: 3rem; position: relative; z-index: 1; }
.home-grid-container > section { margin: 0; width: 100%; }

/* Section Styling (Transparent) */
.compendium-section, .table-section {
  background-color: transparent; padding: 0; border: none; backdrop-filter: none;
}

/* Input Groups & Search Bar */
.input-group { /* For Add Link */
  display: flex; align-items: stretch; gap: 0.75rem;
  max-width: 700px; margin: 0 auto; /* Center input group */
}
.search-bar { /* For Table Filter */
    display: flex; align-items: center; gap: 0.5rem;
    background-color: transparent; padding: 0; border: none;
    margin-bottom: 1.5rem;
}
.search-bar .input { /* Input inside search bar */
    border: 1px solid hsl(var(--border));
    background-color: hsl(var(--input-bg) / 0.7);
    box-shadow: none;
    padding: 0.75rem 1rem;
    flex-grow: 1;
}
.search-bar .input:focus { box-shadow: 0 0 0 3px hsl(var(--accent) / 0.2); }

.input-group .input { flex: 1; }
.button-group { display: flex; gap: 0.75rem; }
.search-icon-wrapper {
    padding: 0.6rem; margin-left: 0.25rem;
    cursor: pointer; border-radius: var(--radius);
    transition: background-color 0.2s ease;
    border: 1px solid hsl(var(--border)); /* Add border to wrapper */
    background-color: hsl(var(--input-bg) / 0.7); /* Match input bg */
}
.search-icon-wrapper:hover { background-color: hsl(var(--border) / 0.5); }
.search-icon-wrapper:focus-visible { outline: none; border-color: hsl(var(--accent)); box-shadow: 0 0 0 2px hsl(var(--background)), 0 0 0 4px hsl(var(--accent) / 0.7);}
.search-icon { color: hsl(var(--muted-foreground)); width: 1.1rem; height: 1.1rem; display: block; }

/* Table Container & Table */
.table-container {
  background-color: transparent; border-radius: var(--radius);
  border: 1px solid hsl(var(--border)); padding: 0;
  overflow: hidden; overflow-x: auto;
}
.table tr:hover td { background-color: hsl(var(--accent) / 0.1); }

/* Link Styling within Table */
.table td a.link { color: hsl(var(--accent)); }
.table td a.link:hover { color: hsl(var(--accent-hover)); }

/* Cell Styling */
.table-row { cursor: pointer; }
.url-cell { word-break: break-all; font-size: 0.9rem; max-width: 300px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; padding-right: 1.5rem; color: hsl(var(--foreground));} /* White URL */
.summary-cell { color: hsl(var(--muted-foreground)); font-size: 0.9rem; line-height: 1.5; }
.summary-cell p { margin-bottom: 0.5rem; }
.summary-cell p:last-child { margin-bottom: 0; }
.table .no-results td { padding: 2.5rem 1rem; }

/* Dialog Adjustments */
.search-modal-title { font-size: 1.5rem; font-weight: 600; color: hsl(var(--foreground)); text-align: left; margin-bottom: 1.5rem; }
.search-modal-content .search-input-group { margin-bottom: 1.5rem; display: flex; gap: 0.75rem; align-items: stretch;}
.search-modal-content .dialog-main-content .table-container {
    margin-top: 0; margin-bottom: 0; box-shadow: none;
    border: 1px solid hsl(var(--border) / 0.5); padding: 0;
    background-color: hsl(var(--muted) / 0.1); backdrop-filter: none;
}
.search-modal-content .table th { background-color: hsl(var(--muted) / 0.2); }
.search-modal-content .table td { border-color: hsl(var(--border) / 0.4); }

/* Responsiveness */
@media (max-width: 768px) {
    .home-container { padding: 1rem 1rem 4rem; }
    .home-header { margin-bottom: 2rem; }
    .main-title-area { margin-bottom: 2.5rem; }
    .main-title { font-size: 1.8rem; }
    .input-group { flex-direction: column; gap: 0.75rem; max-width: none; } /* Full width input group */
    .button-group { justify-content: flex-start; width: 100%; }
    .button-group .button { flex-grow: 1; } /* Make buttons fill width */
    .search-bar { flex-wrap: wrap; background: transparent; border: none; padding: 0;}
    .search-bar .input { border: 1px solid hsl(var(--border)); background-color: hsl(var(--input-bg)/0.7); min-width: 100%; margin-bottom: 0.75rem; } /* Stack filter input */
    .search-icon-wrapper { margin-left: 0; margin-right: auto; } /* Align icon left */
    .home-grid-container { gap: 2.5rem; }
    .url-cell { max-width: 180px; padding-right: 0.5rem;}
    .table th, .table td { padding: 0.6rem 0.8rem; font-size: 0.8rem; }
    .summary-cell { font-size: 0.85rem; line-height: 1.4; }
}
@media (max-width: 480px) {
    .company-logo { height: 50px; }
    .home-header .button { font-size: 0.8rem; padding: 0.4rem 0.8rem; }
    .main-title { font-size: 1.6rem; }
    .button { font-size: 0.85rem; padding: 0.6rem 1rem; }
    .input { font-size: 0.9rem; padding: 0.7rem 0.9rem; }
    .url-cell { max-width: 150px; font-size: 0.8rem; }
    .table th, .table td { padding: 0.5rem 0.6rem; }
}


================================================
File: src/components/Home.jsx
================================================
// src/components/Home.jsx

// Imports (Keep all imports from the previous "black screen fix" version)
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { Search, Plus, ArrowLeft } from "lucide-react";
import { Input } from "./ui/input";
import { Button } from "./ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "./ui/table";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from "./ui/dialog";
import supabase from "../supabaseConfig";
import './Home.css';

function Home() {
  console.log("Rendering Home component..."); // Log start

  const navigate = useNavigate();

  // --- State Hooks (Keep As Is) ---
  const [searchQuery, setSearchQuery] = useState("");
  const [links, setLinks] = useState([]);
  const [searchResults, setSearchResults] = useState([]);
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [newLink, setNewLink] = useState("");
  const [isAddingLink, setIsAddingLink] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const [expandedRows, setExpandedRows] = useState({});
  const [isMobile, setIsMobile] = useState(false);
  const [tableSearchQuery, setTableSearchQuery] = useState("");
  const [searchResultCount, setSearchResultCount] = useState("5");
  const [showExistingLinkDialog, setShowExistingLinkDialog] = useState(false);
  const [isLoadingLinks, setIsLoadingLinks] = useState(true);

  // --- Effects & Functions (Keep ALL logic from the "black screen fix" version) ---
  useEffect(() => { /* Handle Resize */ setIsMobile(window.innerWidth < 640); const hr = () => setIsMobile(window.innerWidth<640); window.addEventListener('resize',hr); return () => window.removeEventListener('resize',hr); }, []);
  const debounce = (func, delay) => { let t; return (...a) => { clearTimeout(t); t = setTimeout(() => func.apply(this,a), delay);}; };
  const debouncedFetchLinks = React.useCallback(debounce(async (st) => { console.log("Fetch:", st); setIsLoadingLinks(true); try { let q = supabase.from('links').select('id,url,summary,created_at').order('created_at',{ascending:false}); if(st) q=q.or(`url.ilike.%${st}%,summary.ilike.%${st}%`); const{data,error}=await q; if(error)throw error; console.log("Fetched:", data); setLinks(data||[]); } catch(e){console.error("Fetch Err:",e);setLinks([]);alert(`Fetch Err: ${e.message||"?"}`)} finally {setIsLoadingLinks(false)}}, 300),[]);
  useEffect(() => { debouncedFetchLinks(tableSearchQuery); }, [tableSearchQuery, debouncedFetchLinks]);
  useEffect(() => { console.log("Initial fetch..."); debouncedFetchLinks(''); }, [debouncedFetchLinks]);

  const handleSubmit = async () => { /* Submit Logic from previous fix */
    const trimmedLink = newLink.trim();
    if (!trimmedLink) { alert("Please enter a link."); return; }
    try { new URL(trimmedLink); } catch (_) { alert("Invalid URL format."); return; }
    setIsAddingLink(true); console.log("Submitting link:", trimmedLink);
    const backendUrl = import.meta.env.VITE_BACKEND_URL || 'http://localhost:8000';
    if (!backendUrl) { console.error("VITE_BACKEND_URL undefined!"); alert("Backend URL missing."); setIsAddingLink(false); return; }
    try {
        const { data: existing, error: checkErr } = await supabase.from('links').select('url').eq('url', trimmedLink).limit(1);
        if (checkErr) throw new Error(`Supabase check: ${checkErr.message}`);
        if (existing?.length) { setShowExistingLinkDialog(true); setNewLink(""); throw new Error("Link exists"); }
        const response = await axios.post(`${backendUrl}/summarize`, { url: trimmedLink }, { timeout: 45000 });
        const summary = response.data.summary || "Summary could not be generated.";
        const { data: insertData, error: insertErr } = await supabase.from('links').insert([{ url: trimmedLink, summary: summary }]).select();
        if (insertErr) throw new Error(`Supabase insert: ${insertErr.message}`);
        const addedLink = insertData?.[0] || { id: `temp-${Date.now()}`, url: trimmedLink, summary: summary, created_at: new Date().toISOString() };
        setLinks(prev => [addedLink, ...prev]); setNewLink(""); console.log("Added:", addedLink);
    } catch (error) {
        console.error("handleSubmit Error:", error); if (error.message === "Link exists") return;
        if (axios.isCancel(error)) console.log("Cancelled");
        else if (error.code === 'ECONNABORTED') alert("Request timed out (45s).");
        else if (error.response) alert(`Backend error (${error.response.status}): ${error.response.data?.detail || 'Check console.'}`);
        else if (error.request) alert("Network error reaching backend.");
        else if (error.message?.includes("duplicate key") || error.message?.includes("violates unique constraint")) { alert("Link already exists."); setShowExistingLinkDialog(true); }
        else alert(`Failed add: ${error.message || "Unknown error."}`);
    } finally { setIsAddingLink(false); }
  };
  const handleKeyPress = (e) => { if (e.key === 'Enter' && !isAddingLink) handleSubmit(); }; // Trigger submit on Enter
  const handleSearch = async () => { /* Search Logic from previous fix */
    const trimmedQuery = searchQuery.trim(); if (!trimmedQuery) { alert("Enter search query."); return; }
    setIsSearching(true); setSearchResults([]); console.log("Semantic search:", trimmedQuery);
    const backendUrl = import.meta.env.VITE_BACKEND_URL || 'http://localhost:8000';
    if (!backendUrl) { console.error("VITE_BACKEND_URL undefined!"); alert("Backend URL missing."); setIsSearching(false); return; }
    try {
        const response = await axios.post(`${backendUrl}/search`, { query: trimmedQuery, k: parseInt(searchResultCount) }, { timeout: 30000 });
        const { matches } = response.data; if (!matches?.length) { setSearchResults([]); return; }
        const { data, error } = await supabase.from('links').select('id, url, summary, created_at').in('id', matches);
        if (error) throw new Error(`Supabase search fetch: ${error.message}`);
        if (data) { const map=new Map(data.map(l=>[l.id,l])); const sorted=matches.map(id=>map.get(id)).filter(Boolean); setSearchResults(sorted); }
        else { setSearchResults([]); }
    } catch (error) {
        console.error("handleSearch Error:", error); if (axios.isCancel(error)) console.log("Search cancelled");
        else if (error.code === 'ECONNABORTED') alert("Search timed out (30s).");
        else if (error.response) alert(`Backend search error (${error.response.status}): ${error.response.data?.detail || 'Check console.'}`);
        else if (error.request) alert("Network error during search.");
        else alert(`Search failed: ${error.message || "Unknown error."}`);
        setSearchResults([]);
    } finally { setIsSearching(false); }
  };
  const handleSearchKeyPress = (e) => { if (e.key === 'Enter' && !isSearching) handleSearch(); };
  const toggleRowExpansion = (id) => { setExpandedRows(prev => ({ ...prev, [id]: !prev[id] })); };
  const renderSummary = (summary, id) => { if (!summary) return <span className="italic text-gray-500">No summary</span>; if (expandedRows[id]) return summary.split('\n').map((p, i)=><p key={i} className="mb-2 last:mb-0">{p||'\u00A0'}</p>); const maxL=isMobile?70:130; return summary.length>maxL?summary.slice(0,maxL)+'…':summary; };
  const handleTableSearchChange = (e) => { setTableSearchQuery(e.target.value); };
  const handleGoToLanding = () => { navigate('/landing'); };

  // --- JSX Rendering ---
  return (
    <div className="home-page-wrapper">
      <div className="fixed-grid-background" aria-hidden="true"><div className="grid-lines"></div></div>

      <div className="home-container">
        <header className="home-header">
            <a href="/landing" onClick={(e) => { e.preventDefault(); handleGoToLanding(); }} className="company-logo-link" title="Go to Landing Page">
                 <img src="/compendium-transparent.png" alt="Compendium Logo" className="company-logo" />
            </a>
            <Button onClick={handleGoToLanding} className="button button-secondary" title="Go back">
                <ArrowLeft className="icon" /> Back
            </Button>
        </header>

        {/* Dialogs */}
        <Dialog open={showExistingLinkDialog} onOpenChange={setShowExistingLinkDialog}>
            {/* ... Existing Link Dialog Content ... */}
            <DialogContent>
               <DialogHeader><DialogTitle>Link Already Exists</DialogTitle></DialogHeader>
               <DialogDescription>This link is already in the database.</DialogDescription>
               <DialogFooter><Button onClick={() => setShowExistingLinkDialog(false)} className="button button-secondary">Close</Button></DialogFooter>
             </DialogContent>
        </Dialog>
        <Dialog open={isSearchOpen} onOpenChange={setIsSearchOpen}>
            {/* ... Advanced Search Dialog Content ... */}
            <DialogContent className="search-modal-content">
              <DialogHeader><DialogTitle className="search-modal-title">Advanced Search</DialogTitle></DialogHeader>
              <div className="dialog-main-content">
                  <div className="search-input-group">
                    <Input type="text" placeholder="Describe what you're looking for..." className="input" value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} onKeyPress={handleSearchKeyPress} aria-label="Enter search query"/>
                    <Select value={searchResultCount} onValueChange={setSearchResultCount}>
                      <SelectTrigger className="w-[130px] flex-shrink-0 button button-secondary"><SelectValue placeholder="Results" /></SelectTrigger>
                      <SelectContent><SelectItem value="3">3 results</SelectItem><SelectItem value="5">5 results</SelectItem><SelectItem value="10">10 results</SelectItem></SelectContent>
                    </Select>
                    <Button onClick={handleSearch} disabled={isSearching || !searchQuery.trim()} className="button button-primary" aria-live="polite">
                      {isSearching ? 'Searching...' : <><Search className="icon" />Search</>}
                    </Button>
                  </div>
                  <div className="table-container">
                     <Table>
                       <TableHeader><TableRow><TableHead>URL</TableHead><TableHead>Summary</TableHead></TableRow></TableHeader>
                       <TableBody>
                         {isSearching ? ( <TableRow><TableCell colSpan={2} className="no-results">Searching...</TableCell></TableRow> ) :
                         searchResults.length > 0 ? ( searchResults.map((link) => ( <TableRow key={`search-${link.id}`} onClick={() => toggleRowExpansion(link.id)} className="table-row"><TableCell className="url-cell"><a href={link.url} target="_blank" rel="noopener noreferrer" className="link" onClick={(e) => e.stopPropagation()}>{link.url}</a></TableCell><TableCell className="summary-cell">{renderSummary(link.summary, link.id)}</TableCell></TableRow> ))) :
                         ( <TableRow><TableCell colSpan={2} className="no-results">No results found.</TableCell></TableRow> )}
                       </TableBody>
                     </Table>
                  </div>
              </div>
              <DialogFooter><Button onClick={() => setIsSearchOpen(false)} className="button button-secondary">Close</Button></DialogFooter>
            </DialogContent>
        </Dialog>

        {/* --- Main Grid Content --- */}
        <main className="home-grid-container">

          {/* Title Area */}
           <div className="main-title-area">
              <h1 className="main-title">
                 Our <span className="highlight">Product</span>
              </h1>
           </div>

          {/* Add Link Section */}
          <section className="compendium-section" aria-label="Add New Link">
            {/* --- Input Group with Buttons --- */}
            <div className="input-group">
              <Input
                type="url"
                placeholder="Paste link here..." // Changed placeholder
                value={newLink}
                onChange={(e) => setNewLink(e.target.value)}
                onKeyPress={handleKeyPress} // Keep Enter key submission
                className="input"
                aria-label="Paste link to add"
                disabled={isAddingLink}
                />
              {/* --- ADDED BUTTONS BACK --- */}
              <div className="button-group">
                <Button
                    onClick={handleSubmit}
                    disabled={isAddingLink || !newLink.trim()}
                    className="button button-primary" // Use primary style
                    aria-live="polite"
                    title="Add this link"
                >
                  {isAddingLink ? 'Adding...' : <><Plus className="icon" /> Add</>}
                </Button>
                <Button
                    onClick={() => setIsSearchOpen(true)} // Open Dialog
                    className="button button-secondary" // Use secondary style
                    title="Advanced Search"
                    aria-label="Open Advanced Search"
                 >
                     <Search className="icon" /> Search
                 </Button>
              </div>
               {/* --- END ADDED BUTTONS --- */}
            </div>
          </section>

          {/* Table Section (Filter + Table) */}
          <section className="table-section" aria-labelledby="links-table-title">
             <h2 id="links-table-title" className="sr-only">Stored Links</h2>
            <div className="search-bar">
              <label htmlFor="table-filter" className="sr-only">Filter links</label>
              {/* Icon is just visual now */}
              <div className="search-icon-wrapper" aria-hidden="true">
                  <Search className="search-icon" />
              </div>
              <Input id="table-filter" type="text" placeholder="Filter links..." value={tableSearchQuery} onChange={handleTableSearchChange} className="input" aria-label="Filter existing links in table" />
            </div>

            <div className="table-container">
               <Table aria-labelledby="links-table-title">
                 <TableHeader><TableRow><TableHead>URL</TableHead><TableHead>Summary</TableHead></TableRow></TableHeader>
                 <TableBody>
                    {isLoadingLinks ? (
                        <TableRow><TableCell colSpan={2} className="no-results">Loading links...</TableCell></TableRow>
                    ) : links.length > 0 ? (
                     links.map((link) => (
                         <TableRow key={link.id} onClick={() => toggleRowExpansion(link.id)} className="table-row" title="Click to expand/collapse summary">
                         <TableCell className="url-cell"><a href={link.url} target="_blank" rel="noopener noreferrer" className="link" onClick={(e) => e.stopPropagation()} title={`Open ${link.url}`}>{link.url}</a></TableCell>
                         <TableCell className="summary-cell">{renderSummary(link.summary, link.id)}</TableCell>
                         </TableRow>
                     ))
                     ) : (
                     <TableRow><TableCell colSpan={2} className="no-results">
                         {tableSearchQuery
                           ? 'No links found matching filter.'
                           : 'No links added yet. Paste one above to start.'
                         }
                     </TableCell></TableRow>
                     )}
                 </TableBody>
               </Table>
            </div>
          </section>
        </main>
      </div>
    </div>
  );
}

export default Home;


================================================
File: src/components/LoginSignupPage.jsx
================================================
// src/components/LoginSignupPage.jsx

import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Loader from "@/components/ui/Loader"; // Assuming Loader component works
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

// --- SVG Icon Components ---
const GoogleIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="18"
    height="18"
    viewBox="0 0 48 48"
  >
    <path
      fill="#FFC107"
      d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"
    ></path>
    <path
      fill="#FF3D00"
      d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"
    ></path>
    <path
      fill="#4CAF50"
      d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"
    ></path>
    <path
      fill="#1976D2"
      d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"
    ></path>
  </svg>
);

const TwitterIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="18"
    height="18"
    viewBox="0 0 24 24"
    fill="currentColor"
    className="text-white"
  >
    <path d="M23.643 4.937c-.835.37-1.732.62-2.675.733.962-.576 1.664-1.485 2.022-2.575-.9.534-1.897.922-2.958 1.13-.85-.904-2.06-1.47-3.417-1.47-2.576 0-4.654 2.078-4.654 4.654 0 .364.042.718.12 1.06-3.873-.195-7.304-2.05-9.602-4.868-.4.69-.63 1.49-.63 2.342 0 1.616.823 3.043 2.072 3.879-.764-.025-1.482-.234-2.112-.583v.06c0 2.257 1.605 4.14 3.737 4.568-.392.106-.803.162-1.227.162-.3 0-.593-.028-.877-.082.593 1.85 2.313 3.198 4.352 3.234-1.595 1.25-3.604 1.995-5.786 1.995-.376 0-.747-.022-1.112-.065 2.062 1.323 4.511 2.093 7.14 2.093 8.57 0 13.255-7.098 13.255-13.254 0-.201-.005-.402-.014-.602.916-.66 1.705-1.478 2.323-2.41z" />
  </svg>
);

const EyeIcon = ({ visible }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="20"
    height="20"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
  >
    {visible ? (
      <>
        {/* Eye Open Icon */}
        <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z" />
        <circle cx="12" cy="12" r="3" />
      </>
    ) : (
      <>
        {/* Eye Closed/Slash Icon */}
        <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24" />
        <line x1="1" y1="1" x2="23" y2="23" />
      </>
    )}
  </svg>
);
// --- End SVG Icons ---

const LoginSignupPage = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
  });
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [particles, setParticles] = useState([]);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);

  const navigate = useNavigate();

  // --- Input Handler ---
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    setError(""); // Clear error on input change
    setSuccess(""); // Clear success on input change
  };

  // --- Password Visibility Toggles ---
  const togglePasswordVisibility = () => {
    setShowPassword((prev) => !prev);
  };

  const toggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword((prev) => !prev);
  };

  // --- Particle Effect ---
  useEffect(() => {
    let intervalId;
    const generateParticles = () => {
      const newParticles = [];
      const particleCount = 50;
      for (let i = 0; i < particleCount; i++) {
        newParticles.push({
          id: i,
          x: Math.random() * 100,
          y: Math.random() * 100,
          size: Math.random() * 10 + 2,
          speed: Math.random() * 0.3 + 0.1,
          opacity: Math.random() * 0.5 + 0.1,
        });
      }
      setParticles(newParticles);
    };
    generateParticles();
    intervalId = setInterval(() => {
      setParticles((prevParticles) =>
        prevParticles.map((particle) => {
          let newX = particle.x + (Math.random() * 0.2 - 0.1);
          let newOpacity = particle.opacity + (Math.random() * 0.05 - 0.025);
          if (newX < 0) newX = 0;
          if (newX > 100) newX = 100;
          if (newOpacity < 0) newOpacity = 0;
          if (newOpacity > 1) newOpacity = 1;
          return {
            ...particle,
            y: (particle.y + particle.speed) % 100,
            x: newX,
            opacity: newOpacity,
          };
        }),
      );
    }, 50);
    return () => clearInterval(intervalId);
  }, []);

  // --- Form Validation ---
  const validateForm = () => {
    setError(""); // Clear previous errors
    if (isLogin) {
      if (!formData.email || !formData.password) {
        setError("Please enter both email and password.");
        return false;
      }
      // Basic length check for login
      if (formData.password.length < 6) {
        setError("Password seems too short.");
        return false;
      }
    } else {
      // Signup validation
      if (!formData.name.trim()) {
        setError("Please enter your name.");
        return false;
      }
      if (!formData.email) {
        setError("Please enter your email.");
        return false;
      }
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(formData.email)) {
        setError("Please enter a valid email address.");
        return false;
      }
      if (!formData.password) {
        setError("Please enter a password.");
        return false;
      }
      if (formData.password.length < 6) {
        setError("Password must be at least 6 characters.");
        return false;
      }
      const hasUpperCase = /[A-Z]/.test(formData.password);
      const hasLowerCase = /[a-z]/.test(formData.password);
      const hasNumbers = /\d/.test(formData.password);
      const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(formData.password);
      if (!hasUpperCase || !hasLowerCase || !hasNumbers || !hasSpecialChar) {
        setError(
          "Password needs uppercase, lowercase, number, and special character.",
        );
        return false;
      }
      if (!formData.confirmPassword) {
        setError("Please confirm your password.");
        return false;
      }
      if (formData.password !== formData.confirmPassword) {
        setError("Passwords do not match.");
        return false;
      }
    }
    return true; // Validation passed
  };

  // --- Form Submission Handler ---
  const handleSubmit = async (e) => {
    e.preventDefault(); // Prevent default form submission
    setError("");
    setSuccess("");

    if (!validateForm()) {
      // Stop if validation fails
      return;
    }

    setLoading(true); // Show loader

    // Simulate API call delay
    await new Promise((resolve) => setTimeout(resolve, 1000));

    if (isLogin) {
      // --- LOGIN LOGIC (Simulated) ---
      console.log("Attempting login for:", formData.email);
      toast.success("Login Successful!", {
        position: "bottom-right",
        autoClose: 2000,
        hideProgressBar: false /* etc */,
      });
      localStorage.setItem("userEmail", formData.email);
      // Optional: Store name if available
      if (formData.name) {
        // Simple check if name field was somehow populated during login attempt (unlikely but safe)
        localStorage.setItem("userName", formData.name);
      }

      setTimeout(() => {
        setLoading(false);
        navigate("/landing"); // Navigate after toast
      }, 1500);
    } else {
      // --- SIGNUP LOGIC (Simulated) ---
      console.log("Attempting signup for:", formData.name, formData.email);
      setSuccess("Account created successfully! Please log in.");
      setIsLogin(true); // Switch to login mode
      // Store name from successful signup for potential use later
      localStorage.setItem("userName", formData.name); // Store name on signup success
      setFormData({ name: "", email: "", password: "", confirmPassword: "" }); // Clear form
      setLoading(false); // Hide loader
    }
  };

  // --- Toggle between Login and Signup Mode ---
  const toggleMode = () => {
    setIsLogin(!isLogin);
    setError("");
    setSuccess("");
    setFormData({ name: "", email: "", password: "", confirmPassword: "" });
    setShowPassword(false); // Reset visibility state
    setShowConfirmPassword(false);
  };

  // --- JSX Structure ---
  return (
    <div className="flex items-center justify-center min-h-screen w-screen bg-black text-white relative overflow-hidden px-4 sm:px-6 lg:px-8">
      <ToastContainer
        position="bottom-right"
        autoClose={2000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="dark"
      />

      {loading ? (
        <Loader />
      ) : (
        <>
          {/* Background Particles */}
          <div className="absolute inset-0 overflow-hidden bg-black z-0">
            {particles.map((particle) => (
              <div
                key={particle.id}
                className="absolute rounded-full"
                style={{
                  left: `${particle.x}%`,
                  top: `${particle.y}%`,
                  width: `${particle.size}px`,
                  height: `${particle.size}px`,
                  opacity: particle.opacity,
                  filter: "blur(1px)",
                  backgroundColor: "#8685ef",
                }}
              />
            ))}
          </div>
          {/* Glass Card */}
          <div className="relative z-10 w-full max-w-md p-6 sm:p-8 bg-black/80 backdrop-blur-lg rounded-2xl shadow-2xl border border-gray-800">
            {/* Header */}
            <div className="mb-6 sm:mb-8 text-center">
              <h1
                className="text-2xl sm:text-3xl font-bold mb-1"
                style={{
                  color: "#8685ef",
                  fontFamily: "IBM Plex Mono, monospace",
                }}
              >
                {isLogin ? "Welcome Back" : "Create Account"}
              </h1>
              <p
                className="mt-1 text-sm sm:text-base text-white"
                style={{ fontFamily: "IBM Plex Mono, monospace" }}
              >
                {isLogin
                  ? "Sign in to continue"
                  : "Get started by creating your account"}
              </p>
            </div>

            {/* Error/Success Messages */}
            {error && (
              <div
                className="mb-4 p-3 bg-red-900/30 border border-red-500/50 rounded-lg text-red-300 text-sm font-medium text-center"
                style={{ fontFamily: "IBM Plex Mono, monospace" }}
              >
                {error}
              </div>
            )}
            {success && (
              <div
                className="mb-4 p-3 bg-green-900/30 border border-green-500/50 rounded-lg text-green-300 text-sm font-medium text-center"
                style={{ fontFamily: "IBM Plex Mono, monospace" }}
              >
                {success}
              </div>
            )}

            {/* Form */}
            <form onSubmit={handleSubmit} className="w-full space-y-4">
              {/* Name Input (Signup Only) */}
              {!isLogin && (
                <div>
                  <label
                    className="block mb-1.5 text-xs sm:text-sm text-gray-300"
                    htmlFor="name"
                    style={{ fontFamily: "IBM Plex Mono, monospace" }}
                  >
                    {" "}
                    Your Name{" "}
                  </label>
                  <input
                    id="name"
                    name="name"
                    type="text"
                    required
                    className="w-full px-3 sm:px-4 py-2 sm:py-3 bg-black/70 border border-gray-700 rounded-lg focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500/50 transition-all text-white placeholder:text-gray-500 text-sm sm:text-base"
                    placeholder="Enter your name"
                    value={formData.name}
                    onChange={handleChange}
                    style={{ fontFamily: "IBM Plex Mono, monospace" }}
                    autoComplete="off"
                  />
                </div>
              )}

              {/* Email Input */}
              <div>
                <label
                  className="block mb-1.5 text-xs sm:text-sm text-gray-300"
                  htmlFor="email"
                  style={{ fontFamily: "IBM Plex Mono, monospace" }}
                >
                  {" "}
                  Email Address{" "}
                </label>
                <input
                  id="email"
                  name="email"
                  type="email"
                  required
                  className="w-full px-3 sm:px-4 py-2 sm:py-3 bg-black/70 border border-gray-700 rounded-lg focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500/50 transition-all text-white placeholder:text-gray-500 text-sm sm:text-base"
                  placeholder="Enter your email"
                  value={formData.email}
                  onChange={handleChange}
                  style={{ fontFamily: "IBM Plex Mono, monospace" }}
                  autoComplete="off"
                />
              </div>

              {/* Password Input */}
              <div>
                <label
                  className="block mb-1.5 text-xs sm:text-sm text-gray-300"
                  htmlFor="password"
                  style={{ fontFamily: "IBM Plex Mono, monospace" }}
                >
                  {" "}
                  Password{" "}
                </label>
                <div className="relative">
                  <input
                    id="password"
                    name="password"
                    required
                    type={showPassword ? "text" : "password"} // Dynamic type
                    className="w-full px-3 sm:px-4 py-2 sm:py-3 bg-black/70 border border-gray-700 rounded-lg focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500/50 transition-all text-white placeholder:text-gray-500 pr-10 sm:pr-12 text-sm sm:text-base"
                    placeholder="Password"
                    value={formData.password}
                    onChange={handleChange}
                    style={{ fontFamily: "IBM Plex Mono, monospace" }}
                    autoComplete="off"
                  />
                  <button
                    type="button" // IMPORTANT: type="button"
                    className="absolute right-2 sm:right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-purple-300 p-1 focus:outline-none focus:ring-1 focus:ring-purple-500/50 rounded-full z-20"
                    onClick={togglePasswordVisibility} // Assign correct handler
                    aria-label={
                      showPassword ? "Hide password" : "Show password"
                    }
                  >
                    <EyeIcon visible={showPassword} />
                  </button>
                </div>
              </div>

              {/* Confirm Password Input (Signup Only) */}
              {!isLogin && (
                <div>
                  <label
                    className="block mb-1.5 text-xs sm:text-sm text-gray-300"
                    htmlFor="confirmPassword"
                    style={{ fontFamily: "IBM Plex Mono, monospace" }}
                  >
                    {" "}
                    Confirm Password{" "}
                  </label>
                  <div className="relative">
                    <input
                      id="confirmPassword"
                      name="confirmPassword"
                      required
                      type={showConfirmPassword ? "text" : "password"} // Dynamic type
                      className="w-full px-3 sm:px-4 py-2 sm:py-3 bg-black/70 border border-gray-700 rounded-lg focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500/50 transition-all text-white placeholder:text-gray-500 pr-10 sm:pr-12 text-sm sm:text-base"
                      placeholder="Confirm Password"
                      value={formData.confirmPassword}
                      onChange={handleChange}
                      style={{ fontFamily: "IBM Plex Mono, monospace" }}
                      autoComplete="off"
                    />
                    <button
                      type="button" // IMPORTANT: type="button"
                      className="absolute right-2 sm:right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-purple-300 p-1 focus:outline-none focus:ring-1 focus:ring-purple-500/50 rounded-full z-20"
                      onClick={toggleConfirmPasswordVisibility} // Assign correct handler
                      aria-label={
                        showConfirmPassword
                          ? "Hide confirm password"
                          : "Show confirm password"
                      }
                    >
                      <EyeIcon visible={showConfirmPassword} />
                    </button>
                  </div>
                </div>
              )}

              {/* Forgot Password Link (Login Only) */}
              {isLogin && (
                <div className="text-right pt-1">
                  {" "}
                  {/* Added slight padding top */}
                  <a
                    href="#"
                    className="text-xs sm:text-sm text-purple-400 hover:text-purple-300 transition-colors"
                    onClick={(e) => {
                      e.preventDefault();
                      alert("Forgot Password clicked - not implemented.");
                    }}
                    style={{ fontFamily: "IBM Plex Mono, monospace" }}
                  >
                    {" "}
                    Forgot Password?{" "}
                  </a>
                </div>
              )}

              {/* Submit Button */}
              <button
                type="submit"
                disabled={loading}
                className={`w-full py-2.5 sm:py-3 px-4 rounded-lg font-semibold text-sm sm:text-base transition-all duration-300 text-white disabled:opacity-60 disabled:cursor-not-allowed ${isLogin ? "bg-purple-600 hover:bg-purple-700 active:bg-purple-800" : "bg-purple-600 hover:bg-purple-700 active:bg-purple-800"}`}
                style={{
                  boxShadow: "0 4px 14px rgba(134, 133, 239, 0.25)",
                  fontFamily: "IBM Plex Mono, monospace",
                }}
              >
                {loading
                  ? "Processing..."
                  : isLogin
                    ? "Sign In"
                    : "Create Account"}
              </button>
            </form>

            {/* Toggle Mode Link */}
            <div className="mt-6 text-center">
              <p
                className="text-xs sm:text-sm text-gray-400"
                style={{ fontFamily: "IBM Plex Mono, monospace" }}
              >
                {isLogin
                  ? "Don't have an account?"
                  : "Already have an account?"}
                <button
                  onClick={toggleMode}
                  className="ml-1.5 font-medium transition-colors hover:text-purple-300 focus:outline-none focus:underline"
                  style={{
                    color: "#8685ef",
                    fontFamily: "IBM Plex Mono, monospace",
                  }}
                >
                  {isLogin ? "Sign Up" : "Sign In"}
                </button>
              </p>
            </div>

            {/* Social Login Separator & Buttons (Login Only) */}
            {isLogin && (
              <div className="mt-6 pt-6 border-t border-gray-700/50">
                <div className="relative mb-4">
                  <div
                    className="absolute inset-0 flex items-center"
                    aria-hidden="true"
                  >
                    <div className="w-full border-t border-gray-700/50"></div>
                  </div>
                  <div className="relative flex justify-center">
                    <span
                      className="bg-black/80 px-2 text-xs sm:text-sm text-gray-400"
                      style={{ fontFamily: "IBM Plex Mono, monospace" }}
                    >
                      Or continue with
                    </span>
                  </div>
                </div>
                <div className="flex flex-wrap justify-center gap-3 sm:gap-4">
                  <button /* Google */
                    className="flex items-center justify-center px-3 py-1.5 sm:px-4 sm:py-2 rounded-lg bg-gray-800/60 border border-gray-700 hover:border-purple-500/70 transition-colors text-white text-xs sm:text-sm focus:outline-none focus:ring-1 focus:ring-purple-500/50"
                    onClick={(e) => {
                      e.preventDefault();
                      alert("Google Sign-in clicked - not implemented.");
                    }}
                    style={{ fontFamily: "IBM Plex Mono, monospace" }}
                  >
                    <GoogleIcon />{" "}
                    <span className="ml-1.5 sm:ml-2">Google</span>
                  </button>
                  <button /* Twitter */
                    className="flex items-center justify-center px-3 py-1.5 sm:px-4 sm:py-2 rounded-lg bg-gray-800/60 border border-gray-700 hover:border-purple-500/70 transition-colors text-white text-xs sm:text-sm focus:outline-none focus:ring-1 focus:ring-purple-500/50"
                    onClick={(e) => {
                      e.preventDefault();
                      alert("Twitter Sign-in clicked - not implemented.");
                    }}
                    style={{ fontFamily: "IBM Plex Mono, monospace" }}
                  >
                    <TwitterIcon />{" "}
                    <span className="ml-1.5 sm:ml-2">Twitter</span>
                  </button>
                </div>
              </div>
            )}
          </div>{" "}
          {/* End Card */}
        </>
      )}
    </div> // End Page Container
  );
};

export default LoginSignupPage;



================================================
File: src/components/ui/LandingPage.jsx
================================================
// src/components/ui/LandingPage.jsx

"use client";

import { useState, useEffect, useRef } from "react";
import {
  motion,
  AnimatePresence,
  useScroll,
  useTransform,
  useSpring,
  useInView,
} from "framer-motion";
import { Link } from "react-scroll"; // For smooth scrolling within the page
import { useNavigate } from "react-router-dom"; // For navigating to other routes (like /home)
import { Menu, X } from "lucide-react"; // Icons for mobile menu

// --- Typewriter Component ---
const Typewriter = ({ text, className }) => {
  const [displayText, setDisplayText] = useState("");
  const [currentIndex, setCurrentIndex] = useState(0);

  useEffect(() => {
    if (currentIndex < text.length) {
      const timeout = setTimeout(() => {
        setDisplayText((prev) => prev + text[currentIndex]);
        setCurrentIndex((prev) => prev + 1);
      }, 50); // Typing speed
      return () => clearTimeout(timeout);
    }
  }, [currentIndex, text]);

  return (
    <motion.div
      className={className}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      {displayText}
      <motion.span
        className="inline-block ml-1"
        animate={{ opacity: [0, 1, 0] }}
        transition={{ repeat: Infinity, duration: 0.8, ease: "linear" }}
      >
        |
      </motion.span>
    </motion.div>
  );
};

// --- Main Landing Page Component ---
const LandingPage = () => {
  const navigate = useNavigate();
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  // --- Framer Motion Scroll Hooks ---
  const { scrollYProgress } = useScroll({
    offset: ["start start", "end start"],
    layoutEffect: false,
  });
  const heroOpacity = useTransform(scrollYProgress, [0, 0.2], [1, 0], {
    clamp: false,
  });
  const heroScale = useTransform(scrollYProgress, [0, 0.2], [1, 0.9], {
    clamp: false,
  });
  const heroYPos = useTransform(scrollYProgress, [0, 0.2], [0, -50], {
    clamp: false,
  });
  const scrollTracer = useSpring(scrollYProgress, {
    stiffness: 100,
    damping: 30,
    restDelta: 0.001,
    mass: 0.5,
  });

  // --- Navbar Scroll Background Effect ---
  useEffect(() => {
    const handleScroll = () => setIsScrolled(window.scrollY > 50);
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  // --- Reset Scroll Position on Mount ---
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  // --- Mobile Menu Toggle & Body Scroll Lock ---
  const toggleMobileMenu = () => setIsMobileMenuOpen((prev) => !prev);
  const closeMobileMenu = () => setIsMobileMenuOpen(false);

  useEffect(() => {
    document.body.style.overflow = isMobileMenuOpen ? "hidden" : "unset";
    return () => {
      document.body.style.overflow = "unset";
    };
  }, [isMobileMenuOpen]);

  // --- FAQ Accordion State & Toggle ---
  const [activeIndex, setActiveIndex] = useState(null);
  const toggleAccordion = (index) =>
    setActiveIndex(activeIndex === index ? null : index);

  // --- Data (Features, Testimonials, FAQs, Pricing) ---
  const features = [
    {
      title: "User-Driven Link Addition",
      description:
        "Empower your community to contribute knowledge with our simple link-sharing system.",
      icon: (
        <svg
          className="w-8 h-8 md:w-10 md:h-10"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"
          />
        </svg>
      ),
    },
    {
      title: "Smart Filters and Search",
      description:
        "Organize and filter content by tags, categories, and custom attributes for quick access.",
      icon: (
        <svg
          className="w-8 h-8 md:w-10 md:h-10"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"
          />
        </svg>
      ),
    },
    {
      title: "AI-Powered Contextual Search",
      description:
        "Find exactly what you need with our intelligent RAG-based search that understands context and relevance.",
      icon: (
        <svg
          className="w-8 h-8 md:w-10 md:h-10"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
          />
        </svg>
      ),
    },
    {
      title: "Centralized Clean Dashboard",
      description:
        "Access all your community's shared knowledge in one beautifully designed, intuitive interface.",
      icon: (
        <svg
          className="w-8 h-8 md:w-10 md:h-10"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
          />
        </svg>
      ),
    },
  ];
  const testimonials = [
    {
      name: "Priya R.",
      title: "Community Manager",
      text: "This solved our biggest community pain point.",
    },
    {
      name: "Rajat K.",
      title: "Product Lead",
      text: "The AI search is mind-blowing.",
    },
    {
      name: "Anjali S.",
      title: "Team Lead",
      text: "No more scrolling through chats.",
    },
    { name: "Kunal V.", title: "Developer", text: "Love the interface!" },
    {
      name: "Rhea M.",
      title: "Content Creator",
      text: "Organizing links has never been easier.",
    },
    {
      name: "Mohit J.",
      title: "UX Designer",
      text: "Beautifully executed platform.",
    },
  ];
  const faqs = [
    {
      question: "Can I use Compendium for personal use?",
      answer:
        "While Compendium was designed with communities in mind, many individuals use it to organize their own collection of links and resources.",
    },
    {
      question: "Is there a mobile version?",
      answer:
        "Yes, Compendium is fully responsive and works on all devices. We also plan to release native mobile apps for iOS and Android for an even better mobile experience.",
    },
    {
      question: "What powers the AI search?",
      answer:
        "Our search is powered by a custom-built Retrieval Augmented Generation (RAG) system combined with vector embeddings that understands the context of your query and retrieves the most relevant links from your collection.",
    },
    {
      question: "Can I import old links?",
      answer:
        "Yes! Compendium allows you to bulk import links from various sources including browser bookmarks, spreadsheets, and potentially directly from chat platforms in the future.",
    },
    {
      question: "How secure is my data?",
      answer:
        "We employ industry-standard security measures, including encryption at rest and in transit, and regular backups, to ensure your data is always safe and protected.",
    },
  ];
  const pricingPlans = [
    {
      name: "Free",
      price: "₹0",
      period: "forever",
      features: [
        "Up to 500 links",
        "Basic search",
        "3 team members",
        "Community support",
      ],
      cta: "Get Started",
      popular: false,
    },
    {
      name: "Pro",
      price: "₹299",
      period: "per month",
      features: [
        "Unlimited links",
        "AI-powered search",
        "Up to 20 team members",
        "Priority support",
        "Advanced analytics",
      ],
      cta: "Start Free Trial",
      popular: true,
    },
    {
      name: "Enterprise",
      price: "Custom",
      period: "pricing",
      features: [
        "Unlimited everything",
        "Dedicated support",
        "Custom integrations",
        "SSO & advanced security",
        "SLA guarantees",
      ],
      cta: "Contact Sales",
      popular: false,
    },
  ];

  // --- Initial Forum Topics Data ---
  const initialForumTopics = [
    {
      title: "Getting Started with Compendium",
      author: "Priya Sharma",
      replies: 3,
      lastActivity: "2 hours ago",
      category: "Guides",
      content: "I'm new to Compendium and would love to hear some tips...",
      repliesList: [
        {
          author: "Arjun Patel",
          time: "1 hour ago",
          content: "Welcome! Start with link organization.",
          likes: 12,
        },
        {
          author: "Meera Desai",
          time: "45 mins ago",
          content: "Check out the AI search feature.",
          likes: 8,
        },
        {
          author: "Rajat K.",
          time: "15 mins ago",
          content: "The browser extension is helpful!",
          likes: 5,
        },
      ],
    },
    {
      title: "Best Practices for Link Organization",
      author: "Rahul Verma",
      replies: 2,
      lastActivity: "5 hours ago",
      category: "Tips & Tricks",
      content: "What's everyone's favorite way to organize links?",
      repliesList: [
        {
          author: "Ananya Singh",
          time: "4 hours ago",
          content: "Use tags and categories.",
          likes: 15,
        },
        {
          author: "Vikram Reddy",
          time: "3 hours ago",
          content: "Create custom collections per project.",
          likes: 9,
        },
      ],
    },
    {
      title: "Feature Request: Dark Mode Toggle",
      author: "Sam Joshi",
      replies: 2,
      lastActivity: "1 day ago",
      category: "Feedback",
      content: "Would love an option to toggle between light and dark modes!",
      repliesList: [
        {
          author: "Dev Team",
          time: "20 hours ago",
          content: "Thanks, Sam! Considering it.",
          likes: 18,
        },
        {
          author: "Priya R.",
          time: "19 hours ago",
          content: "+1 for this!",
          likes: 11,
        },
      ],
    },
  ];

  // --- Animation Variants & Section Refs ---
  const fadeInUp = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.6, ease: "easeOut" },
    },
  };
  const staggerContainer = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { staggerChildren: 0.15, delayChildren: 0.1 },
    },
  };
  const heroRef = useRef(null);
  const aboutRef = useRef(null);
  const featuresRef = useRef(null);
  const testimonialsRef = useRef(null);
  const pricingRef = useRef(null);
  const faqRef = useRef(null);
  const forumRef = useRef(null);
  const contactRef = useRef(null);
  const heroInView = useInView(heroRef, { once: true, amount: 0.2 });
  const aboutInView = useInView(aboutRef, { once: true, amount: 0.3 });
  const featuresInView = useInView(featuresRef, { once: true, amount: 0.2 });
  const testimonialsInView = useInView(testimonialsRef, {
    once: true,
    amount: 0.1,
  });
  const pricingInView = useInView(pricingRef, { once: true, amount: 0.2 });
  const faqInView = useInView(faqRef, { once: true, amount: 0.2 });
  const forumInView = useInView(forumRef, { once: true, amount: 0.2 });
  const contactInView = useInView(contactRef, { once: true, amount: 0.2 });

  // --- Forum State & Handlers ---
  const [forumTopics, setForumTopics] = useState(initialForumTopics); // *** Initialize forum topics with state ***
  const [expandedTopic, setExpandedTopic] = useState(null);
  const [newReplies, setNewReplies] = useState({});
  const [replyInputs, setReplyInputs] = useState({});
  const toggleTopic = (index) =>
    setExpandedTopic((prevIndex) => (prevIndex === index ? null : index));

  const handleReplyChange = (topicIndex, value) => {
    setReplyInputs((prev) => ({ ...prev, [topicIndex]: value }));
  };

  const handleAddReply = (topicIndex) => {
    const currentInput = replyInputs[topicIndex]?.trim();
    if (!currentInput) return;
    const userName = localStorage.getItem("userName") || "You"; // Get username
    const newReply = {
      author: userName,
      time: "Just now",
      content: currentInput,
      likes: 0,
    };
    setNewReplies((prev) => ({
      ...prev,
      [topicIndex]: [...(prev[topicIndex] || []), newReply],
    }));
    setReplyInputs((prev) => ({ ...prev, [topicIndex]: "" }));
    // Optionally update the main topic reply count (visual only unless saved)
    setForumTopics((prevTopics) =>
      prevTopics.map((topic, idx) =>
        idx === topicIndex ? { ...topic, replies: topic.replies + 1 } : topic,
      ),
    );
  };

  // --- State and Handlers for "Start New Discussion" Form ---
  const [isNewDiscussionFormVisible, setIsNewDiscussionFormVisible] =
    useState(false);
  const [newTopicTitle, setNewTopicTitle] = useState("");
  const [newTopicContent, setNewTopicContent] = useState("");
  const [newTopicCategory, setNewTopicCategory] = useState(""); // Start empty or with a default

  // *** UPDATED: Function to handle posting new discussion ***
  const handlePostNewDiscussion = (e) => {
    e.preventDefault(); // Prevent page reload
    const title = newTopicTitle.trim();
    const content = newTopicContent.trim();
    const category = newTopicCategory.trim() || "General"; // Default category if empty
    const userName = localStorage.getItem("userName") || "Anonymous"; // Get username

    if (!title || !content) {
      alert("Please enter both a title and content for your discussion.");
      return;
    }

    // Create the new topic object
    const newTopic = {
      title,
      author: userName,
      replies: 0, // New topics start with 0 replies
      lastActivity: "Just now", // Set current time indicator
      category,
      content,
      repliesList: [], // New topics start with an empty replies list
    };

    // Update the forumTopics state to include the new topic at the beginning
    setForumTopics((prevTopics) => [newTopic, ...prevTopics]);

    // Reset form fields and hide the form
    setNewTopicTitle("");
    setNewTopicContent("");
    setNewTopicCategory(""); // Reset category as well
    setIsNewDiscussionFormVisible(false);

    // Optional: Provide user feedback
    // alert("New discussion posted!"); // You might want a more subtle notification
  };

  // --- Navigation Handlers ---
  const handleGetStarted = () => navigate("/home");
  const handleViewProduct = () => navigate("/home");

  // --- Navigation Links Data Structure ---
  const navLinks = [
    { to: "home", label: "Home" },
    { to: "about", label: "About Us" },
    { to: "features", label: "Features" },
    { to: "testimonials", label: "Testimonials" },
    { to: "pricing", label: "Pricing" },
    { to: "faq", label: "FAQs" },
    { to: "forum", label: "Forum" },
    { to: "contact", label: "Contact" },
  ];

  // --- JSX Render ---
  return (
    <div className="bg-transparent text-white min-h-screen font-['IBM_Plex_Mono',monospace] selection:bg-[#8483ec] selection:text-black">
      {/* --- Fixed Background Elements --- */}
      <div className="fixed inset-0 z-[-1]">
        <div className="absolute inset-0 bg-gradient-to-br from-[#080808] via-[#0a0a0a] to-[#080808]"></div>
        <div className="absolute inset-0 opacity-[0.07]">
          <div
            className="absolute inset-0"
            style={{
              backgroundImage: `linear-gradient(hsl(0 0% 100% / 0.5) 0.5px, transparent 0.5px), linear-gradient(90deg, hsl(0 0% 100% / 0.5) 0.5px, transparent 0.5px)`,
              backgroundSize: "40px 40px",
            }}
          ></div>
        </div>
      </div>
      {/* --- Scroll Progress Tracer --- */}
      <motion.div
        className="fixed left-2 md:left-4 top-0 bottom-0 w-1 origin-top z-50"
        style={{
          scaleY: scrollTracer,
          background: "linear-gradient(to bottom, #6366f1, #8b5cf6, #d946ef)",
          opacity: 0.6,
        }}
      >
        <motion.div
          className="absolute top-0 left-1/2 -translate-x-1/2 w-3 h-3 md:w-4 md:h-4 rounded-full bg-gradient-to-r from-[#6366f1] via-[#8b5cf6] to-[#d946ef] shadow-[0_0_15px_6px_rgba(139,92,246,0.4)]"
          animate={{
            scale: [1, 1.2, 1],
            opacity: [0.7, 1, 0.7],
            boxShadow: [
              "0 0 15px 6px rgba(139,92,246,0.4)",
              "0 0 25px 10px rgba(139,92,246,0.5)",
              "0 0 15px 6px rgba(139,92,246,0.4)",
            ],
          }}
          transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
        />
      </motion.div>
      {/* --- Main Content Wrapper --- */}
      <div className="relative z-10">
        {/* --- Navbar --- */}
        <nav
          className={`fixed w-full z-40 transition-all duration-300 ease-in-out ${isScrolled ? "py-2" : "py-4"}`}
        >
          <div
            className={`container mx-auto px-4 sm:px-6 lg:px-8 transition-all duration-300 ease-in-out ${isScrolled ? "max-w-6xl bg-black/30 backdrop-blur-lg rounded-full shadow-lg py-2" : "max-w-none bg-transparent rounded-none py-0"}`}
          >
            <div className="flex items-center justify-between h-14">
              <Link
                to="home"
                spy={true}
                smooth={true}
                duration={500}
                offset={-100}
                className="flex-shrink-0 flex items-center cursor-pointer"
                title="Scroll to Top"
              >
                <img
                  src="/compendium-transparent.png"
                  alt="Compendium"
                  className="h-10 w-auto"
                />
              </Link>
              <div className="hidden md:flex items-center space-x-5 lg:space-x-7">
                {navLinks.map((link) => (
                  <Link
                    key={link.to}
                    to={link.to}
                    spy={true}
                    smooth={true}
                    duration={500}
                    offset={-70}
                    className="text-sm lg:text-base text-gray-300 cursor-pointer transition-colors relative group hover:text-white"
                    activeClass="text-[#8483ec] font-medium"
                  >
                    {link.label}
                    <span className="absolute bottom-[-4px] left-0 w-0 h-[2px] bg-[#8483ec] transition-all duration-300 group-hover:w-full"></span>
                  </Link>
                ))}
              </div>
              <div className="flex items-center space-x-3">
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={handleViewProduct}
                  className="hidden sm:inline-block bg-gradient-to-r from-[#6366f1] to-[#8b5cf6] px-5 py-2 rounded-full text-sm font-medium shadow-[0_0_15px_rgba(99,102,241,0.4)] hover:shadow-[0_0_25px_rgba(139,92,246,0.6)] transition-all text-white"
                >
                  {" "}
                  View Product{" "}
                </motion.button>
                <div className="md:hidden">
                  <button
                    onClick={toggleMobileMenu}
                    className="text-gray-300 hover:text-white focus:outline-none p-2 rounded-md hover:bg-white/10 transition-colors"
                    aria-label="Toggle menu"
                    aria-expanded={isMobileMenuOpen}
                  >
                    {" "}
                    <Menu size={26} />{" "}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </nav>

        {/* --- Full Screen Mobile Menu (Animated) --- */}
        <AnimatePresence>
          {isMobileMenuOpen && (
            <motion.div
              key="mobile-menu"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.3, ease: "easeInOut" }}
              className="fixed inset-0 z-50 bg-black/95 backdrop-blur-md h-dvh w-screen flex flex-col items-center justify-center space-y-5 font-['IBM_Plex_Mono',monospace] md:hidden"
            >
              <button
                onClick={closeMobileMenu}
                className="absolute top-5 right-5 text-gray-400 hover:text-white p-2 rounded-md hover:bg-white/10 transition-colors"
                aria-label="Close menu"
              >
                {" "}
                <X size={30} />{" "}
              </button>
              {navLinks.map((link) => (
                <Link
                  key={`mobile-${link.to}`}
                  to={link.to}
                  spy={true}
                  smooth={true}
                  duration={500}
                  offset={-70}
                  className="block text-2xl text-gray-300 cursor-pointer transition-colors hover:text-white py-2"
                  onClick={closeMobileMenu}
                >
                  {" "}
                  {link.label}{" "}
                </Link>
              ))}
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => {
                  handleViewProduct();
                  closeMobileMenu();
                }}
                className="mt-6 bg-gradient-to-r from-[#6366f1] to-[#8b5cf6] px-8 py-3 rounded-full text-lg font-medium shadow-[0_0_15px_rgba(99,102,241,0.4)] hover:shadow-[0_0_25px_rgba(139,92,246,0.6)] transition-shadow text-white"
              >
                {" "}
                View Product{" "}
              </motion.button>
            </motion.div>
          )}
        </AnimatePresence>

        {/* --- Hero Section (id="home") --- */}
        <section
          ref={heroRef}
          id="home"
          className="relative min-h-screen flex items-center justify-center overflow-hidden pt-24 pb-12 md:pt-32 md:pb-16"
        >
          <motion.div
            className="absolute inset-0 z-[-1]"
            style={{ y: useTransform(scrollYProgress, [0, 1], [0, -100]) }}
          >
            <motion.div
              animate={{
                x: [0, 10, 0],
                y: [0, -15, 0],
                opacity: [0.4, 0.6, 0.4],
              }}
              transition={{ repeat: Infinity, duration: 8, ease: "easeInOut" }}
              className="absolute top-1/4 left-1/4 w-[250px] h-[250px] sm:w-[400px] sm:h-[400px] rounded-full bg-gradient-to-r from-[#6366f1]/15 to-[#d946ef]/15 blur-3xl"
            ></motion.div>
            <motion.div
              animate={{
                x: [0, -20, 0],
                y: [0, 20, 0],
                opacity: [0.3, 0.5, 0.3],
              }}
              transition={{
                repeat: Infinity,
                duration: 10,
                ease: "easeInOut",
                delay: 1,
              }}
              className="absolute bottom-1/4 right-1/4 w-[300px] h-[300px] sm:w-[500px] sm:h-[500px] rounded-full bg-gradient-to-r from-[#8b5cf6]/15 to-[#6366f1]/15 blur-3xl"
            ></motion.div>
          </motion.div>
          <motion.div
            style={{ opacity: heroOpacity, scale: heroScale, y: heroYPos }}
            className="container mx-auto px-6 z-10 text-center"
          >
            <motion.div
              initial="hidden"
              animate={heroInView ? "visible" : "hidden"}
              variants={staggerContainer}
              className="max-w-4xl mx-auto"
            >
              <motion.h1
                variants={fadeInUp}
                className="text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-bold mb-6 leading-tight tracking-tight text-white"
              >
                <Typewriter
                  text="Where Shared Links Live Forever"
                  className=""
                />
              </motion.h1>
              <motion.p
                variants={fadeInUp}
                className="text-lg sm:text-xl md:text-2xl text-gray-300 mb-10 max-w-3xl mx-auto"
              >
                {" "}
                Compendium helps communities organize and retrieve shared
                knowledge with ease.{" "}
              </motion.p>
              <motion.div
                variants={fadeInUp}
                className="flex flex-col sm:flex-row justify-center items-center gap-4"
              >
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={handleGetStarted}
                  className="w-full sm:w-auto bg-[#8483ec] px-8 py-3 rounded-full text-base sm:text-lg font-medium shadow-[0_0_20px_rgba(132,131,236,0.4)] hover:shadow-[0_0_30px_rgba(132,131,236,0.6)] transition-shadow"
                >
                  {" "}
                  Get Started For Free{" "}
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={handleViewProduct}
                  className="w-full sm:w-auto bg-transparent border-2 border-white px-8 py-3 rounded-full text-base sm:text-lg font-medium hover:bg-white/10 transition-colors"
                >
                  {" "}
                  View Our Product{" "}
                </motion.button>
              </motion.div>
            </motion.div>
          </motion.div>
          <div className="absolute bottom-10 left-1/2 -translate-x-1/2 z-10 hidden md:block">
            <Link
              to="about"
              spy={true}
              smooth={true}
              duration={500}
              offset={-70}
              className="cursor-pointer"
            >
              <motion.div
                animate={{ y: [0, 8, 0] }}
                transition={{
                  repeat: Infinity,
                  duration: 1.5,
                  ease: "easeInOut",
                }}
              >
                {" "}
                <svg
                  className="w-8 h-8 text-gray-400 hover:text-white transition-colors"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 14l-7 7m0 0l-7-7m7 7V3"
                  />
                </svg>{" "}
              </motion.div>
            </Link>
          </div>
        </section>

        {/* --- About Section (id="about") --- */}
        <section ref={aboutRef} id="about" className="py-16 md:py-24 relative">
          <motion.div
            initial="hidden"
            animate={aboutInView ? "visible" : "hidden"}
            variants={fadeInUp}
            className="max-w-5xl mx-auto px-6 md:px-8 text-center md:text-left"
          >
            <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-6">
              Built for <span className="text-[#8483ec]">Communities</span>, by
              a <span className="text-[#8483ec]">Community</span>
            </h2>
            <p className="text-lg md:text-xl text-gray-300 mb-10 leading-relaxed max-w-3xl mx-auto md:mx-0">
              Compendium was born out of a simple problem faced in every
              WhatsApp or online group—shared links get lost in endless chats.
              We built a centralized tool that stores, categorizes, and
              intelligently retrieves links so knowledge never gets buried
              again.
            </p>
          </motion.div>
        </section>

        {/* --- Features Section (id="features") --- */}
        <section
          ref={featuresRef}
          id="features"
          className="py-16 md:py-24 relative bg-black/10"
        >
          <div className="container mx-auto px-6 md:px-8">
            <motion.div
              initial="hidden"
              animate={featuresInView ? "visible" : "hidden"}
              variants={fadeInUp}
              className="mb-12 md:mb-16 text-center md:text-left"
            >
              <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 md:mb-6">
                Powerful <span className="text-[#8483ec]">Features</span>
              </h2>
              <p className="text-lg md:text-xl text-gray-300 max-w-3xl mx-auto md:mx-0">
                Compendium comes packed with tools designed to make knowledge
                sharing and retrieval effortless.
              </p>
            </motion.div>
            <motion.div
              className="grid grid-cols-1 md:grid-cols-2 gap-8 md:gap-10"
              initial="hidden"
              animate={featuresInView ? "visible" : "hidden"}
              variants={staggerContainer}
            >
              {features.map((feature, index) => (
                <motion.div
                  key={index}
                  variants={fadeInUp}
                  whileHover={{
                    y: -8,
                    boxShadow: "0 10px 30px rgba(132, 131, 236, 0.2)",
                  }}
                  className="bg-[#0f0f0f] p-6 md:p-8 rounded-2xl border border-[#8483ec]/20 transition-all duration-300 flex flex-col sm:flex-row items-start gap-5 sm:gap-6"
                >
                  {" "}
                  <div className="text-[#8483ec] flex-shrink-0 mt-1">
                    {feature.icon}
                  </div>{" "}
                  <div>
                    {" "}
                    <h3 className="text-xl md:text-2xl font-bold mb-3">
                      {feature.title}
                    </h3>{" "}
                    <p className="text-gray-300 text-base md:text-lg leading-relaxed">
                      {feature.description}
                    </p>{" "}
                  </div>{" "}
                </motion.div>
              ))}
            </motion.div>
          </div>
        </section>

        {/* --- Testimonials Section (id="testimonials") --- */}
        <section
          ref={testimonialsRef}
          id="testimonials"
          className="py-16 md:py-24 relative overflow-hidden"
        >
          <div className="container mx-auto px-6 md:px-8">
            <motion.div
              initial="hidden"
              animate={testimonialsInView ? "visible" : "hidden"}
              variants={fadeInUp}
              className="mb-12 md:mb-16 text-center md:text-left"
            >
              <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 md:mb-6">
                What Our <span className="text-[#8483ec]">Users Say</span>
              </h2>
              <p className="text-lg md:text-xl text-gray-300 max-w-3xl mx-auto md:mx-0">
                Don't just take our word for it. Here's what people are saying
                about Compendium.
              </p>
            </motion.div>
          </div>
          <div
            className="relative flex overflow-hidden group"
            style={{
              maskImage:
                "linear-gradient(to right, transparent 0%, black 10%, black 90%, transparent 100%)",
            }}
          >
            <motion.div
              className="flex gap-6 md:gap-8 py-6 flex-shrink-0"
              animate={{ x: ["0%", "-100%"] }}
              transition={{
                x: {
                  repeat: Infinity,
                  repeatType: "loop",
                  duration: 45,
                  ease: "linear",
                },
              }}
            >
              {[...testimonials, ...testimonials].map((testimonial, index) => (
                <motion.div
                  key={`testimonial-${index}`}
                  className="w-[300px] sm:w-[350px] flex-shrink-0 bg-[#0f0f0f]/50 backdrop-blur-md p-6 md:p-8 rounded-2xl border border-[#8483ec]/20 flex flex-col group-hover:[animation-play-state:paused]"
                >
                  {" "}
                  <div className="flex-1 mb-4">
                    {" "}
                    <p className="text-lg md:text-xl italic text-gray-300">
                      "{testimonial.text}"
                    </p>{" "}
                  </div>{" "}
                  <div>
                    {" "}
                    <h4 className="text-base md:text-lg font-bold">
                      {testimonial.name}
                    </h4>{" "}
                    <p className="text-[#8483ec] text-sm md:text-base">
                      {testimonial.title}
                    </p>{" "}
                  </div>{" "}
                </motion.div>
              ))}
            </motion.div>
          </div>
        </section>

        {/* --- Pricing Section (id="pricing") --- */}
        <section
          ref={pricingRef}
          id="pricing"
          className="py-16 md:py-24 relative bg-black/10"
        >
          <div className="container mx-auto px-6 md:px-8">
            <motion.div
              initial="hidden"
              animate={pricingInView ? "visible" : "hidden"}
              variants={fadeInUp}
              className="mb-12 md:mb-16 text-center"
            >
              <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 md:mb-6">
                Choose the Right{" "}
                <span className="text-[#8483ec]">Plan for You</span>
              </h2>
              <p className="text-lg md:text-xl text-gray-300 max-w-3xl mx-auto">
                Choose the plan that works best for your team. All plans include
                core features.
              </p>
            </motion.div>
            <motion.div
              className="grid grid-cols-1 lg:grid-cols-3 gap-12 lg:gap-8 max-w-6xl mx-auto items-stretch"
              initial="hidden"
              animate={pricingInView ? "visible" : "hidden"}
              variants={staggerContainer}
            >
              {pricingPlans.map((plan, index) => (
                <motion.div
                  key={index}
                  variants={fadeInUp}
                  whileHover={{ y: -10 }}
                  className={`relative flex flex-col bg-[#0f0f0f] rounded-2xl overflow-visible transition-all duration-300 ${plan.popular ? "border-2 border-[#8483ec] shadow-[0_0_35px_rgba(132,131,236,0.25)] scale-100 lg:scale-105 z-10 mt-6 lg:mt-0" : "border border-[#8483ec]/20 mt-0"}`}
                >
                  {plan.popular && (
                    <div className="absolute top-[-0.875rem] left-1/2 -translate-x-1/2 bg-[#8483ec] px-4 py-1 rounded-full text-xs sm:text-sm font-semibold shadow-lg z-20 whitespace-nowrap text-white">
                      {" "}
                      Most Popular{" "}
                    </div>
                  )}
                  <div
                    className={`p-6 md:p-8 ${plan.popular ? "pt-10 md:pt-12" : "pt-8"} flex flex-col flex-grow`}
                  >
                    <h3 className="text-2xl font-bold mb-2 text-center">
                      {plan.name}
                    </h3>
                    <div className="mb-6 text-center">
                      {" "}
                      <span className="text-4xl font-bold">
                        {plan.price}
                      </span>{" "}
                      <span className="text-gray-400 text-sm">
                        /{plan.period}
                      </span>{" "}
                    </div>
                    <ul className="mb-8 space-y-3 flex-grow">
                      {" "}
                      {plan.features.map((feature, i) => (
                        <li key={i} className="flex items-center text-base">
                          {" "}
                          <svg
                            className="w-5 h-5 text-[#8483ec] mr-3 flex-shrink-0"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M5 13l4 4L19 7"
                            />
                          </svg>{" "}
                          <span className="text-gray-300">{feature}</span>{" "}
                        </li>
                      ))}{" "}
                    </ul>
                    <motion.button
                      whileHover={{ scale: 1.03 }}
                      whileTap={{ scale: 0.97 }}
                      className={`w-full mt-auto py-3 rounded-lg font-medium text-base transition-colors ${plan.popular ? "bg-[#8483ec] text-white hover:bg-opacity-90" : "bg-white/10 text-white hover:bg-white/20"}`}
                    >
                      {" "}
                      {plan.cta}{" "}
                    </motion.button>
                  </div>
                </motion.div>
              ))}
            </motion.div>
          </div>
        </section>

        {/* --- FAQ Section (id="faq") --- */}
        <section ref={faqRef} id="faq" className="py-16 md:py-24 relative">
          <div className="container mx-auto px-6 md:px-8">
            <motion.div
              initial="hidden"
              animate={faqInView ? "visible" : "hidden"}
              variants={fadeInUp}
              className="mb-12 md:mb-16 text-center"
            >
              <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 md:mb-6">
                Frequently Asked{" "}
                <span className="text-[#8483ec]">Questions</span>
              </h2>
              <p className="text-lg md:text-xl text-gray-300 max-w-3xl mx-auto">
                Got Questions? Answers below. Still need help? Our team is just
                a click away.
              </p>
            </motion.div>
            <div className="max-w-3xl mx-auto">
              {faqs.map((faq, index) => (
                <motion.div
                  key={index}
                  initial="hidden"
                  animate={faqInView ? "visible" : "hidden"}
                  variants={fadeInUp}
                  transition={{ delay: index * 0.05 }}
                  className="mb-4 overflow-hidden rounded-lg border border-[#8483ec]/20 bg-[#0f0f0f]"
                >
                  <button
                    onClick={() => toggleAccordion(index)}
                    className={`flex justify-between items-center w-full p-4 md:p-5 text-left transition-colors duration-200 hover:bg-white/5 ${activeIndex === index ? "bg-white/5" : ""}`}
                    aria-expanded={activeIndex === index}
                    aria-controls={`faq-content-${index}`}
                  >
                    <span className="text-base md:text-lg font-medium flex-1 pr-4">
                      {faq.question}
                    </span>
                    <motion.div
                      animate={{ rotate: activeIndex === index ? 180 : 0 }}
                      transition={{ duration: 0.3 }}
                    >
                      {" "}
                      <svg
                        className="w-5 h-5 md:w-6 md:h-6 text-[#8483ec] flex-shrink-0"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M19 9l-7 7-7-7"
                        />
                      </svg>{" "}
                    </motion.div>
                  </button>
                  <AnimatePresence initial={false}>
                    {activeIndex === index && (
                      <motion.div
                        id={`faq-content-${index}`}
                        key="content"
                        initial="collapsed"
                        animate="open"
                        exit="collapsed"
                        variants={{
                          open: {
                            opacity: 1,
                            height: "auto",
                            marginTop: "0px",
                          },
                          collapsed: {
                            opacity: 0,
                            height: 0,
                            marginTop: "-1px",
                          },
                        }}
                        transition={{
                          duration: 0.3,
                          ease: [0.04, 0.62, 0.23, 0.98],
                        }}
                        className="overflow-hidden"
                      >
                        <div className="p-4 md:p-5 text-gray-300 text-base border-t border-[#8483ec]/20 leading-relaxed">
                          {" "}
                          {faq.answer}{" "}
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </motion.div>
              ))}
            </div>
          </div>
        </section>

        {/* --- Discussion Forum Section (id="forum") --- */}
        <section
          ref={forumRef}
          id="forum"
          className="py-16 md:py-24 relative bg-black/10"
        >
          <div className="container mx-auto px-6 md:px-8">
            {/* Section Header */}
            <motion.div
              initial="hidden"
              animate={forumInView ? "visible" : "hidden"}
              variants={fadeInUp}
              className="mb-12 md:mb-16 text-center md:text-left"
            >
              <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 md:mb-6">
                Community <span className="text-[#8483ec]">Discussion</span>
              </h2>
              <p className="text-lg md:text-xl text-gray-300 max-w-4xl mx-auto md:mx-0">
                Join the conversation and share your experiences with
                Compendium.
              </p>
            </motion.div>

            {/* Forum Topics Grid */}
            <motion.div
              className="max-w-4xl mx-auto grid gap-6"
              initial="hidden"
              animate={forumInView ? "visible" : "hidden"}
              variants={staggerContainer}
            >
              {/* Map over the forumTopics STATE variable */}
              {forumTopics.map((topic, index) => (
                <motion.div
                  key={index} // Key for list rendering
                  variants={fadeInUp} // Animation variant for each topic card
                  className="bg-[#0f0f0f]/50 backdrop-blur-sm rounded-2xl border border-[#8483ec]/20 transition-shadow duration-300 hover:shadow-[0_0_25px_rgba(132,131,236,0.15)] overflow-hidden" // Added hover shadow and overflow hidden
                >
                  {/* Clickable Topic Header */}
                  <div
                    className="p-5 md:p-6 cursor-pointer hover:bg-white/5 transition-colors"
                    onClick={() => toggleTopic(index)} // Toggle replies visibility
                    role="button" // Accessibility
                    aria-expanded={expandedTopic === index}
                    aria-controls={`forum-replies-${index}`}
                  >
                    <div className="flex flex-col sm:flex-row justify-between items-start gap-3 sm:gap-4">
                      <div className="flex-1">
                        <h3 className="text-lg md:text-xl font-bold mb-2 group-hover:text-[#a9a8ff] transition-colors">
                          {topic.title}
                        </h3>
                        <div className="flex flex-wrap items-center gap-x-3 gap-y-1 text-xs sm:text-sm text-gray-400">
                          <span>
                            by{" "}
                            <span className="font-medium text-gray-300">
                              {topic.author}
                            </span>
                          </span>
                          <span className="hidden sm:inline">•</span>
                          <span>
                            {topic.replies + (newReplies[index]?.length || 0)}{" "}
                            replies
                          </span>{" "}
                          {/* Dynamic reply count */}
                          <span className="hidden sm:inline">•</span>
                          <span className="whitespace-nowrap">
                            {topic.lastActivity}
                          </span>
                        </div>
                      </div>
                      <span className="flex-shrink-0 mt-1 sm:mt-0 px-3 py-1 bg-[#8483ec]/15 text-[#c0b7e8] rounded-full text-xs sm:text-sm font-medium">
                        {topic.category}
                      </span>
                    </div>
                    <p className="mt-3 md:mt-4 text-gray-300 text-base line-clamp-2">
                      {topic.content}
                    </p>
                  </div>

                  {/* Expanded Replies Section (Animated) */}
                  <AnimatePresence initial={false}>
                    {expandedTopic === index && (
                      <motion.div
                        id={`forum-replies-${index}`}
                        key="content"
                        initial="collapsed"
                        animate="open"
                        exit="collapsed"
                        variants={{
                          open: { opacity: 1, height: "auto" },
                          collapsed: { opacity: 0, height: 0 },
                        }}
                        transition={{
                          duration: 0.4,
                          ease: [0.04, 0.62, 0.23, 0.98],
                        }}
                        className="border-t border-[#8483ec]/20 overflow-hidden"
                      >
                        <div className="p-5 md:p-6 space-y-4 bg-black/40">
                          <h4 className="text-base font-semibold text-gray-300 mb-1">
                            Replies:
                          </h4>
                          {/* Render Existing Replies */}
                          {topic.repliesList && topic.repliesList.length > 0
                            ? topic.repliesList.map((reply, replyIndex) => (
                                <div
                                  key={`existing-${replyIndex}`}
                                  className="bg-[#141417]/60 p-4 rounded-lg border border-white/10"
                                >
                                  <div className="flex justify-between items-start mb-2 gap-2">
                                    {" "}
                                    <span className="font-medium text-[#a7a6ff] text-sm sm:text-base">
                                      {reply.author}
                                    </span>{" "}
                                    <span className="text-xs sm:text-sm text-gray-400 flex-shrink-0">
                                      {reply.time}
                                    </span>{" "}
                                  </div>
                                  <p className="text-gray-300 text-sm sm:text-base leading-relaxed">
                                    {reply.content}
                                  </p>
                                  <div className="flex items-center mt-2 text-sm text-gray-400">
                                    {" "}
                                    <motion.button
                                      whileTap={{ scale: 0.9 }}
                                      className="flex items-center hover:text-white transition-colors p-1 -ml-1"
                                    >
                                      {" "}
                                      <svg
                                        className="w-4 h-4 mr-1"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          strokeLinecap="round"
                                          strokeLinejoin="round"
                                          strokeWidth={2}
                                          d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                                        />
                                      </svg>{" "}
                                      {reply.likes}{" "}
                                    </motion.button>{" "}
                                  </div>
                                </div>
                              ))
                            : !newReplies[index]?.length && (
                                <p className="text-sm text-gray-500 italic">
                                  No replies yet.
                                </p>
                              )}
                          {/* Render New Replies */}
                          {newReplies[index]?.map((reply, replyIndex) => (
                            <div
                              key={`new-${replyIndex}`}
                              className="bg-[#1f1f23]/60 p-4 rounded-lg border border-[#8483ec]/20 animate-pulse-once"
                            >
                              <div className="flex justify-between items-start mb-2 gap-2">
                                {" "}
                                <span className="font-medium text-[#c0b7e8] text-sm sm:text-base">
                                  {reply.author}
                                </span>{" "}
                                <span className="text-xs sm:text-sm text-gray-400 flex-shrink-0">
                                  {reply.time}
                                </span>{" "}
                              </div>
                              <p className="text-gray-200 text-sm sm:text-base leading-relaxed">
                                {reply.content}
                              </p>
                              <div className="flex items-center mt-2 text-sm text-gray-400">
                                {" "}
                                <motion.button
                                  whileTap={{ scale: 0.9 }}
                                  className="flex items-center hover:text-white transition-colors p-1 -ml-1"
                                >
                                  {" "}
                                  <svg
                                    className="w-4 h-4 mr-1"
                                    fill="none"
                                    stroke="currentColor"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      strokeWidth={2}
                                      d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                                    />
                                  </svg>{" "}
                                  {reply.likes}{" "}
                                </motion.button>{" "}
                              </div>
                            </div>
                          ))}
                          {/* Reply Input Form */}
                          <div className="flex items-center space-x-3 pt-4 mt-2 border-t border-white/10">
                            <input
                              type="text"
                              value={replyInputs[index] || ""}
                              onChange={(e) =>
                                handleReplyChange(index, e.target.value)
                              }
                              onKeyPress={(e) => {
                                if (
                                  e.key === "Enter" &&
                                  replyInputs[index]?.trim()
                                )
                                  handleAddReply(index);
                              }}
                              placeholder="Write a reply..."
                              className="flex-1 bg-[#141417] text-white px-4 py-2 rounded-lg border border-[#8483ec]/30 focus:border-[#8483ec] focus:ring-1 focus:ring-[#8483ec] outline-none transition-all text-sm sm:text-base placeholder-gray-500"
                              aria-label={`Reply to ${topic.title}`}
                            />
                            <motion.button
                              onClick={() => handleAddReply(index)}
                              whileTap={{ scale: 0.95 }}
                              disabled={!replyInputs[index]?.trim()}
                              className="bg-[#8483ec] px-4 py-2 rounded-lg text-white hover:bg-opacity-90 transition-colors text-sm sm:text-base font-medium flex-shrink-0 disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                              {" "}
                              Reply{" "}
                            </motion.button>
                          </div>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </motion.div>
              ))}
            </motion.div>

            {/* --- Button to Trigger New Discussion Form --- */}
            <motion.div
              className="text-center mt-12"
              initial="hidden"
              animate={forumInView ? "visible" : "hidden"}
              variants={fadeInUp}
            >
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setIsNewDiscussionFormVisible(true)} // Show the form
                className="bg-[#8483ec] px-8 py-3 rounded-full text-base sm:text-lg font-medium shadow-[0_0_20px_rgba(132,131,236,0.4)] hover:shadow-[0_0_30px_rgba(132,131,236,0.6)] transition-shadow"
              >
                Start New Discussion
              </motion.button>
            </motion.div>

            {/* --- Start New Discussion Form Section (Animated) --- */}
            <AnimatePresence>
              {isNewDiscussionFormVisible && (
                <motion.div
                  key="new-discussion-form"
                  initial={{ opacity: 0, y: 30 }} // Start slightly lower and faded out
                  animate={{ opacity: 1, y: 0 }} // Animate to full opacity and original position
                  exit={{ opacity: 0, y: 30 }} // Animate out downwards
                  transition={{ duration: 0.4, ease: "easeOut" }}
                  className="max-w-3xl mx-auto mt-12 bg-[#0f0f0f]/70 backdrop-blur-sm p-6 md:p-8 rounded-2xl border border-[#8483ec]/30 shadow-lg"
                >
                  <h3 className="text-xl md:text-2xl font-bold mb-4 text-center text-white">
                    Start a New Discussion
                  </h3>
                  <p className="text-center text-gray-400 mb-6 text-sm md:text-base">
                    Share your thoughts or ask a question.
                  </p>
                  <form
                    onSubmit={handlePostNewDiscussion}
                    className="space-y-5"
                  >
                    <div>
                      <label
                        htmlFor="new-topic-title"
                        className="block mb-2 text-sm font-medium text-gray-300"
                      >
                        Discussion Title
                      </label>
                      <input
                        type="text"
                        id="new-topic-title"
                        value={newTopicTitle}
                        onChange={(e) => setNewTopicTitle(e.target.value)}
                        required
                        className="w-full p-3 bg-[#1a1a1a] rounded-lg border border-[#8483ec]/30 focus:ring-1 focus:ring-[#8483ec] focus:border-[#8483ec] outline-none transition-colors text-white placeholder-gray-500"
                        placeholder="Enter a clear and concise title"
                      />
                    </div>
                    <div>
                      <label
                        htmlFor="new-topic-category"
                        className="block mb-2 text-sm font-medium text-gray-300"
                      >
                        Category (Optional)
                      </label>
                      <input
                        type="text"
                        id="new-topic-category"
                        value={newTopicCategory}
                        onChange={(e) => setNewTopicCategory(e.target.value)}
                        className="w-full p-3 bg-[#1a1a1a] rounded-lg border border-[#8483ec]/30 focus:ring-1 focus:ring-[#8483ec] focus:border-[#8483ec] outline-none transition-colors text-white placeholder-gray-500"
                        placeholder="e.g., General, Feedback, Tips"
                      />
                    </div>
                    <div>
                      <label
                        htmlFor="new-topic-content"
                        className="block mb-2 text-sm font-medium text-gray-300"
                      >
                        Your Message
                      </label>
                      <textarea
                        id="new-topic-content"
                        rows={5}
                        value={newTopicContent}
                        onChange={(e) => setNewTopicContent(e.target.value)}
                        required
                        className="w-full p-3 bg-[#1a1a1a] rounded-lg border border-[#8483ec]/30 focus:ring-1 focus:ring-[#8483ec] focus:border-[#8483ec] outline-none transition-colors text-white placeholder-gray-500 resize-none"
                        placeholder="Start typing your discussion here..."
                      ></textarea>
                    </div>
                    <div className="flex flex-col sm:flex-row gap-4 pt-2">
                      <motion.button
                        whileHover={{ scale: 1.03 }}
                        whileTap={{ scale: 0.97 }}
                        type="submit"
                        className="w-full sm:w-auto flex-1 order-1 sm:order-2 py-2.5 px-6 bg-[#8483ec] rounded-lg font-medium text-base shadow-[0_4px_15px_rgba(132,131,236,0.2)] hover:shadow-[0_6px_25px_rgba(132,131,236,0.3)] hover:bg-opacity-90 transition-all"
                      >
                        Post Discussion
                      </motion.button>
                      <motion.button
                        whileHover={{ scale: 1.03 }}
                        whileTap={{ scale: 0.97 }}
                        type="button" // Important: type="button" prevents form submission
                        onClick={() => setIsNewDiscussionFormVisible(false)} // Hide form on cancel
                        className="w-full sm:w-auto order-2 sm:order-1 py-2.5 px-6 bg-gray-600/40 hover:bg-gray-500/50 rounded-lg font-medium text-base text-gray-300 transition-colors"
                      >
                        Cancel
                      </motion.button>
                    </div>
                  </form>
                </motion.div>
              )}
            </AnimatePresence>
            {/* --- End New Discussion Form --- */}
          </div>

          {/* Add custom animation style for new replies */}
          <style jsx>{`
            @keyframes pulse-once {
              0% {
                opacity: 0.6;
                transform: scale(0.98);
              }
              50% {
                opacity: 1;
                transform: scale(1.02);
              }
              100% {
                opacity: 1;
                transform: scale(1);
              }
            }
            .animate-pulse-once {
              animation: pulse-once 0.6s ease-out;
            }
          `}</style>
        </section>

        {/* --- Contact Section (id="contact") --- */}
        <section
          ref={contactRef}
          id="contact"
          className="py-16 md:py-24 relative"
        >
          <div className="container mx-auto px-6 md:px-8">
            <motion.div
              initial="hidden"
              animate={contactInView ? "visible" : "hidden"}
              variants={fadeInUp}
              className="mb-12 md:mb-16 text-center"
            >
              <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 md:mb-6">
                Get In <span className="text-[#8483ec]">Touch</span>
              </h2>
              <p className="text-lg md:text-xl text-gray-300 max-w-3xl mx-auto">
                Have questions or want to learn more? Reach out to our team, and
                we will get back to you as soon as possible.
              </p>
            </motion.div>
            <motion.div
              initial="hidden"
              animate={contactInView ? "visible" : "hidden"}
              variants={fadeInUp}
              className="max-w-3xl mx-auto bg-[#0f0f0f] p-6 md:p-10 rounded-2xl border border-[#8483ec]/20 shadow-xl"
            >
              <form className="space-y-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                  <div>
                    <label
                      htmlFor="name"
                      className="block mb-2 text-sm font-medium text-gray-300"
                    >
                      Your Name
                    </label>
                    <input
                      type="text"
                      id="name"
                      name="name"
                      autoComplete="name"
                      className="w-full p-3 bg-[#1a1a1a] rounded-lg border border-[#8483ec]/30 focus:ring-1 focus:ring-[#8483ec] focus:border-[#8483ec] outline-none transition-colors text-white placeholder-gray-500"
                      required
                      placeholder="Enter your full name"
                    />
                  </div>
                  <div>
                    <label
                      htmlFor="email"
                      className="block mb-2 text-sm font-medium text-gray-300"
                    >
                      Your Email
                    </label>
                    <input
                      type="email"
                      id="email"
                      name="email"
                      autoComplete="email"
                      className="w-full p-3 bg-[#1a1a1a] rounded-lg border border-[#8483ec]/30 focus:ring-1 focus:ring-[#8483ec] focus:border-[#8483ec] outline-none transition-colors text-white placeholder-gray-500"
                      required
                      placeholder="you@example.com"
                    />
                  </div>
                </div>
                <div>
                  <label
                    htmlFor="message"
                    className="block mb-2 text-sm font-medium text-gray-300"
                  >
                    Your Message
                  </label>
                  <textarea
                    id="message"
                    name="message"
                    rows={5}
                    className="w-full p-3 bg-[#1a1a1a] rounded-lg border border-[#8483ec]/30 focus:ring-1 focus:ring-[#8483ec] focus:border-[#8483ec] outline-none transition-colors text-white placeholder-gray-500 resize-none"
                    required
                    placeholder="How can we help?"
                  ></textarea>
                </div>
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  type="submit"
                  className="w-full py-3 bg-[#8483ec] rounded-lg font-medium text-base shadow-[0_5px_20px_rgba(132,131,236,0.25)] hover:shadow-[0_8px_30px_rgba(132,131,236,0.35)] hover:bg-opacity-90 transition-all"
                >
                  Send Message
                </motion.button>
              </form>
            </motion.div>
            <motion.div
              initial="hidden"
              animate={contactInView ? "visible" : "hidden"}
              variants={fadeInUp}
              transition={{ delay: 0.2 }}
              className="flex justify-center mt-12 space-x-6"
            >
              <motion.a
                href="#"
                target="_blank"
                rel="noopener noreferrer"
                whileHover={{ y: -4, color: "#8483ec" }}
                className="text-gray-400 transition-colors"
                aria-label="Twitter"
              >
                <svg
                  className="h-6 w-6 md:h-7 md:w-7"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
                </svg>
              </motion.a>
              <motion.a
                href="#"
                target="_blank"
                rel="noopener noreferrer"
                whileHover={{ y: -4, color: "#8483ec" }}
                className="text-gray-400 transition-colors"
                aria-label="Github"
              >
                <svg
                  className="h-6 w-6 md:h-7 md:w-7"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    fillRule="evenodd"
                    d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z"
                    clipRule="evenodd"
                  />
                </svg>
              </motion.a>
              <motion.a
                href="#"
                target="_blank"
                rel="noopener noreferrer"
                whileHover={{ y: -4, color: "#8483ec" }}
                className="text-gray-400 transition-colors"
                aria-label="LinkedIn"
              >
                <svg
                  className="h-6 w-6 md:h-7 md:w-7"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    fillRule="evenodd"
                    d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"
                    clipRule="evenodd"
                  />
                </svg>
              </motion.a>
            </motion.div>
          </div>
        </section>
      </div>{" "}
      {/* End Main Content Relative Wrapper */}
      {/* --- Footer Section --- */}
      <footer className="py-12 md:py-16 bg-black/20 backdrop-blur-sm border-t border-[#8483ec]/15">
        <div className="container mx-auto px-6 md:px-8">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-8 mb-10">
            <div className="col-span-2 sm:col-span-1 text-center sm:text-left">
              <Link
                to="home"
                spy={true}
                smooth={true}
                duration={500}
                offset={-100}
                className="inline-block mb-4 cursor-pointer"
              >
                <img
                  src="/compendium-transparent.png"
                  alt="Compendium"
                  className="h-10 md:h-12 w-auto mx-auto sm:mx-0"
                />
              </Link>
              <p className="text-sm text-gray-400">
                Where shared links live forever.
              </p>
            </div>
            <div>
              <h3 className="text-sm font-semibold mb-4 text-white uppercase tracking-wider">
                Product
              </h3>
              <ul className="space-y-2">
                <li>
                  <Link
                    to="features"
                    spy={true}
                    smooth={true}
                    duration={500}
                    offset={-70}
                    className="text-sm text-gray-400 hover:text-white transition-colors cursor-pointer"
                  >
                    Features
                  </Link>
                </li>
                <li>
                  <Link
                    to="pricing"
                    spy={true}
                    smooth={true}
                    duration={500}
                    offset={-70}
                    className="text-sm text-gray-400 hover:text-white transition-colors cursor-pointer"
                  >
                    Pricing
                  </Link>
                </li>
                <li>
                  <a
                    href="#"
                    className="text-sm text-gray-400 hover:text-white transition-colors"
                  >
                    Documentation
                  </a>
                </li>
              </ul>
            </div>
            <div>
              <h3 className="text-sm font-semibold mb-4 text-white uppercase tracking-wider">
                Company
              </h3>
              <ul className="space-y-2">
                <li>
                  <Link
                    to="about"
                    spy={true}
                    smooth={true}
                    duration={500}
                    offset={-70}
                    className="text-sm text-gray-400 hover:text-white transition-colors cursor-pointer"
                  >
                    About
                  </Link>
                </li>
                <li>
                  <a
                    href="#"
                    className="text-sm text-gray-400 hover:text-white transition-colors"
                  >
                    Blog
                  </a>
                </li>
                <li>
                  <a
                    href="#"
                    className="text-sm text-gray-400 hover:text-white transition-colors"
                  >
                    Careers
                  </a>
                </li>
              </ul>
            </div>
            <div>
              <h3 className="text-sm font-semibold mb-4 text-white uppercase tracking-wider">
                Legal
              </h3>
              <ul className="space-y-2">
                <li>
                  <a
                    href="#"
                    className="text-sm text-gray-400 hover:text-white transition-colors"
                  >
                    Privacy Policy
                  </a>
                </li>
                <li>
                  <a
                    href="#"
                    className="text-sm text-gray-400 hover:text-white transition-colors"
                  >
                    Terms of Service
                  </a>
                </li>
                <li>
                  <Link
                    to="contact"
                    spy={true}
                    smooth={true}
                    duration={500}
                    offset={-70}
                    className="text-sm text-gray-400 hover:text-white transition-colors cursor-pointer"
                  >
                    Contact
                  </Link>
                </li>
              </ul>
            </div>
          </div>
          <div className="mt-10 pt-8 border-t border-[#8483ec]/15 text-center">
            <p className="text-sm text-gray-500">
              © {new Date().getFullYear()} Compendium. All rights reserved.
            </p>
          </div>
        </div>
      </footer>
      {/* --- Global Styles (Font Import, Scroll Behavior, etc.) --- */}
      <style jsx global>{`
        @import url("https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@400;500;600;700&display=swap");

        html {
          scroll-behavior: smooth; /* Enable smooth scrolling for anchor links */
          scroll-padding-top: 80px; /* Offset for fixed header during scroll-snap */
        }

        body {
          font-family: "IBM Plex Mono", monospace;
          background-color: #0a0a0a; /* Base background color */
          -webkit-font-smoothing: antialiased; /* Smoother fonts on WebKit */
          -moz-osx-font-smoothing: grayscale; /* Smoother fonts on Firefox */
        }

       
        ::-webkit-scrollbar {
          width: 8px;
          height: 8px;
        }
        ::-webkit-scrollbar-track {
          background: #18181b;
        } /* Darker track */
        ::-webkit-scrollbar-thumb {
          background-color: #3f3f46;
          border-radius: 4px;
        } /* Neutral thumb */
        ::-webkit-scrollbar-thumb:hover {
          background-color: #52525b;
        } /* Lighter on hover */

        /* Style for react-scroll active link highlight */
        .text-\\[\\#8483ec\\] {
          color: #8483ec !important; /* Force active color if Tailwind class is overridden */
        }
        .font-medium.text-\\[\\#8483ec\\] {
          font-weight: 600 !important; /* Example: Make active link bolder */
        }
      `}</style>
    </div>
  );
};

export default LandingPage;



================================================
File: src/components/ui/button.css
================================================
/* src/components/ui/button.css */

.button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  position: relative;
  white-space: nowrap;
  border-radius: 9999px;
  font-size: 0.9rem;
  font-weight: 500; /* Base button weight */
  padding: 0.65rem 1.25rem;
  cursor: pointer;
  user-select: none;
  transition: all 0.2s ease-out, border-color 0.4s ease;
  border: 1px solid hsl(var(--border)); /* Default border */
  background-color: transparent; /* Transparent background */
  color: hsl(var(--muted-foreground)); /* Muted text color by default */
  font-family: var(--font-sans);
  outline: none;
  overflow: hidden;
}

/* --- General Hover/Focus/Active --- */
.button:hover:not(:disabled) {
  border-color: hsl(var(--accent));
  color: hsl(var(--foreground)); /* White text */
  transform: translateY(-1px);
}
.button:active:not(:disabled) {
  transform: translateY(0px);
  border-color: hsl(var(--accent-hover));
  color: hsl(var(--accent-hover));
}
.button:focus-visible {
  box-shadow: 0 0 0 2px hsl(var(--background)), 0 0 0 4px hsl(var(--accent) / 0.7);
  border-color: hsl(var(--accent));
}

/* --- Primary Button Style --- */
.button-primary {
  border-color: hsl(var(--accent));
  color: hsl(var(--accent));
  font-weight: 600; /* Bolder primary */
}
.button-primary:hover:not(:disabled) {
  border-color: hsl(var(--accent-hover));
  color: hsl(var(--accent-hover));
  background-color: hsl(var(--accent) / 0.1);
  transform: translateY(-2px) scale(1.02);
}
.button-primary:active:not(:disabled) {
  transform: translateY(0px) scale(1);
  color: hsl(var(--foreground)); /* White text on press */
  background-color: hsl(var(--accent) / 0.2);
}

/* --- Secondary Button Style (same as default in this simplified version) --- */
.button-secondary {
   /* Inherits base .button styles */
}

/* --- Disabled State --- */
.button:disabled {
  opacity: 0.4; cursor: not-allowed; transform: none;
  border-color: hsl(var(--border) / 0.5);
  color: hsl(var(--muted-foreground) / 0.5);
}

/* --- Icon Styling --- */
.button .icon {
  margin-right: 0.5rem; flex-shrink: 0; width: 1em; height: 1em;
  vertical-align: middle; margin-top: -1px;
  transition: transform 0.2s ease-out;
  opacity: 0.8;
}
.button:hover:not(:disabled) .icon { transform: scale(1.1); opacity: 1; }
.button .icon:only-child { margin-right: 0; }


================================================
File: src/components/ui/button.jsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import "./button.css"

const Button = React.forwardRef(({ className, variant = "default", size = "default", asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      className={`button button-${variant} button-${size} ${className}`}
      ref={ref}
      {...props} />
  );
})
Button.displayName = "Button"

export { Button }



================================================
File: src/components/ui/dialog.css
================================================
/* src/components/ui/dialog.css */

.fixedOverlay {
  position: fixed; inset: 0; z-index: 50;
  background-color: rgba(10, 10, 10, 0.7);
  backdrop-filter: blur(5px);
  animation: overlayShow 150ms cubic-bezier(0.16, 1, 0.3, 1);
}
@keyframes overlayShow { from { opacity: 0; } to { opacity: 1; } }

.dialogContent {
  font-family: var(--font-sans);
  position: fixed; left: 50%; top: 50%; z-index: 50;
  transform: translate(-50%, -50%);
  width: 90vw; max-width: 55rem; max-height: 90vh;
  overflow: hidden; display: flex; flex-direction: column; gap: 1.5rem;
  background-color: hsl(var(--background) / 0.7); /* Darker, less transparent */
  color: hsl(var(--foreground)); /* White Text */
  padding: 2rem; border-radius: var(--radius);
  border: 1px solid hsl(var(--border));
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  backdrop-filter: blur(10px);
  animation: contentShow 150ms cubic-bezier(0.16, 1, 0.3, 1);
}
@keyframes contentShow { from { opacity: 0; transform: translate(-50%,-48%) scale(0.96); } to { opacity: 1; transform: translate(-50%,-50%) scale(1); } }

/* Close Button */
.dialogCloseButton {
  position: absolute; right: 1rem; top: 1rem; border-radius: 50%;
  width: 2.25rem; height: 2.25rem; display: inline-flex; align-items: center;
  justify-content: center; color: hsl(var(--muted-foreground));
  background-color: transparent; border: 1px solid transparent;
  cursor: pointer; transition: all 0.2s ease;
}
.dialogCloseButton:hover { background-color: hsl(var(--border) / 0.5); color: hsl(var(--foreground)); transform: scale(1.1); border-color: hsl(var(--border));}
.dialogCloseButton:focus-visible { outline: none; box-shadow: 0 0 0 2px hsl(var(--background)), 0 0 0 4px hsl(var(--accent)); border-color: hsl(var(--accent));}
.dialogCloseButton > svg { width: 1rem; height: 1rem; }

/* Header, Footer, Title, Description */
.dialogHeader { display: flex; flex-direction: column; gap: 0.5rem; padding-right: 2.5rem; flex-shrink: 0; }
.dialogFooter { display: flex; flex-direction: column-reverse; gap: 0.75rem; margin-top: auto; padding-top: 1rem; border-top: 1px solid hsl(var(--border) / 0.5); flex-shrink: 0; }
@media (min-width: 640px) { .dialogFooter { flex-direction: row; justify-content: flex-end; } }
.dialogTitle { font-size: 1.4rem; line-height: 1.4; font-weight: 600; color: hsl(var(--foreground)); }
.dialogDescription { font-size: 0.95rem; color: hsl(var(--muted-foreground)); line-height: 1.6; }

/* Content Area for Scrolling */
.dialog-main-content {
    flex-grow: 1; overflow-y: auto; overflow-x: hidden;
    margin: -0.5rem -2rem; padding: 0.5rem 2rem;
}
.dialog-main-content::-webkit-scrollbar { width: 6px; }
.dialog-main-content::-webkit-scrollbar-track { background: transparent; }
.dialog-main-content::-webkit-scrollbar-thumb { background-color: hsl(var(--border)); border-radius: 3px; }
.dialog-main-content::-webkit-scrollbar-thumb:hover { background-color: hsl(var(--muted-foreground)); }


================================================
File: src/components/ui/dialog.jsx
================================================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

// import { cn } from "@/lib/utils" // removed cn import

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={`fixedOverlay ${className || ""}`} // replaced cn with template literal
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={`dialogContent ${className || ""}`} // replaced cn with template literal
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="dialogCloseButton"> {/* replaced cn with classname */}
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal >
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={`dialogHeader ${className || ""}`} // replaced cn with template literal
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={`dialogFooter ${className || ""}`} // replaced cn with template literal
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={`dialogTitle ${className || ""}`} // replaced cn with template literal
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={`dialogDescription ${className || ""}`} // replaced cn with template literal
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};





================================================
File: src/components/ui/hover-border-gradient.jsx
================================================
import React, { useState, useEffect } from "react";
import { motion } from "framer-motion"; // Correct import for motion component
import { cn } from "@/lib/utils";

export function HoverBorderGradient({
  children,
  containerClassName,
  className,
  as: Tag = "button",
  duration = 1.5, // Slow down rotation slightly
  clockwise = true,
  ...props
}) {
  const [hovered, setHovered] = useState(false);
  const [direction, setDirection] = useState("TOP");

  const rotateDirection = (currentDirection) => {
    const directions = ["TOP", "LEFT", "BOTTOM", "RIGHT"];
    const currentIndex = directions.indexOf(currentDirection);
    const nextIndex = clockwise
      ? (currentIndex - 1 + directions.length) % directions.length
      : (currentIndex + 1) % directions.length;
    return directions[nextIndex];
  };

  // Use a very faint grey for the constantly rotating gradient
  const movingMap = {
    TOP: "radial-gradient(20.7% 50% at 50% 0%, hsl(0, 0%, 100%, 0.1) 0%, rgba(255, 255, 255, 0) 100%)",
    LEFT: "radial-gradient(16.6% 43.1% at 0% 50%, hsl(0, 0%, 100%, 0.1) 0%, rgba(255, 255, 255, 0) 100%)",
    BOTTOM: "radial-gradient(20.7% 50% at 50% 100%, hsl(0, 0%, 100%, 0.1) 0%, rgba(255, 255, 255, 0) 100%)",
    RIGHT: "radial-gradient(16.2% 41.19% at 100% 50%, hsl(0, 0%, 100%, 0.1) 0%, rgba(255, 255, 255, 0) 100%)",
  };

  // Keep the brighter purple highlight for hover
  const highlight =
    "radial-gradient(75% 181.15% at 50% 50%, #8a2be2 0%, rgba(0, 0, 0, 0) 100%)"; // Purple: #8a2be2

  useEffect(() => {
    // Remove the !hovered check to make the interval run constantly
    const interval = setInterval(() => {
      setDirection((prevState) => rotateDirection(prevState));
    }, duration * 1000);
    return () => clearInterval(interval);
    // Dependencies remain the same, but the effect runs regardless of hover state
  }, [duration, clockwise]);

  return (
    <Tag
      onMouseEnter={(event) => {
        setHovered(true);
      }}
      onMouseLeave={() => setHovered(false)}
      className={cn(
        "relative flex rounded-full border border-transparent dark:border-white/[0.2] content-center bg-black/95 hover:bg-black transition-colors duration-300 items-center flex-col flex-nowrap gap-10 h-min justify-center overflow-visible p-px decoration-clone w-fit",
        containerClassName // This applies classes to the outer container
      )}
      {...props} // Passes props like onClick, disabled to the underlying Tag (button)
    >
      <div
        className={cn(
          "text-white z-10 bg-black px-4 py-2 rounded-[inherit]",
          "text-sm", // Reduced font size using Tailwind class
          "font-mono", // Apply monospace font (Tailwind class)
          className
        )}
        style={{ fontFamily: 'IBM Plex Mono, monospace' }} // Explicit font family
      >
        {children}
      </div>
      <motion.div
        className={cn(
          "flex-none inset-0 overflow-hidden absolute z-0 rounded-[inherit]"
        )}
        style={{
          filter: "blur(3px)", // Slightly increased blur
          position: "absolute",
          width: "100%",
          height: "100%",
        }}
        initial={{ background: movingMap[direction] }}
        animate={{
          background: hovered
            ? [movingMap[direction], highlight] // On hover, transition to purple
            : movingMap[direction], // Otherwise, stay with the subtle rotating grey
        }}
        transition={{ ease: "linear", duration: duration ?? 1.5 }}
      />
      {/* The inner black background */}
      <div className="bg-black absolute z-1 flex-none inset-[2px] rounded-full" />
    </Tag>
  );
}

// Added export default for convenience if needed elsewhere, or keep as named export
// export default HoverBorderGradient;



================================================
File: src/components/ui/input.css
================================================
/* src/components/ui/input.css */

.input {
  width: 100%;
  padding: 0.75rem 1rem;
  border-radius: var(--radius);
  background-color: hsl(var(--input-bg) / 0.6); /* Darker semi-transparent */
  color: hsl(var(--foreground)); /* White text */
  border: 1px solid hsl(var(--border));
  transition: border-color 0.2s ease, box-shadow 0.2s ease, background-color 0.2s ease;
  font-family: var(--font-sans);
  font-size: 0.95rem;
  line-height: 1.5;
  outline: none;
}

.input::placeholder {
  color: hsl(var(--muted-foreground));
  opacity: 0.6;
}

.input:hover:not(:disabled) {
    border-color: hsl(var(--border) / 1.3);
    background-color: hsl(var(--input-bg) / 0.7);
}

.input:focus {
  border-color: hsl(var(--accent));
  background-color: transparent; /* Transparent on focus */
  box-shadow: 0 0 0 3px hsl(var(--accent) / 0.15); /* Simple accent glow */
}

.input:disabled {
    opacity: 0.5; cursor: not-allowed;
    background-color: hsl(var(--input-bg) / 0.4);
}


================================================
File: src/components/ui/input.jsx
================================================
import * as React from "react"
import "./input.css"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    (<input
      type={type}
      className={`input ${className || ""}`}
      ref={ref}
      {...props} />)
  );
})
Input.displayName = "Input"

export { Input }



================================================
File: src/components/ui/loader.css
================================================
.loader-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh; /* Full viewport height */
  background-color: #000; /* Black background */
}

.loader {
  color: #8182ed; /* Accent color */
  font-size: 1.5rem;
  font-weight: bold;
} 


================================================
File: src/components/ui/loader.jsx
================================================
import React from 'react';
import styled from 'styled-components';

const Loader = () => {
  return (
    <StyledWrapper>
      <div className="loader">
        <div className="load-inner load-one" />
        <div className="load-inner load-two" />
        <div className="load-inner load-three" />
        <span className="text">Loading...</span>
      </div>
    </StyledWrapper>
  );
}

const StyledWrapper = styled.div`
  .loader {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100px;
    height: 100px;
    margin: 130px 0;
    perspective: 780px;
  }

  .text {
    font-size: 20px;
    font-weight: 700;
    color: #cecece;
    z-index: 10;
  }

  .load-inner {
    position: absolute;
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    border-radius: 50%;
  }

  .load-inner.load-one {
    left: 0%;
    top: 0%;
    border-bottom: 3px solid #5c5edc;
    animation: rotate1 1.15s linear infinite;
  }

  .load-inner.load-two {
    right: 0%;
    top: 0%;
    border-right: 3px solid #9147ff;
    animation: rotate2 1.15s 0.1s linear infinite;
  }

  .load-inner.load-three {
    right: 0%;
    bottom: 0%;
    border-top: 3px solid #3b82f6;
    animation: rotate3 1.15s 0.15s linear infinite;
  }

  @keyframes rotate1 {
    0% {
      transform: rotateX(45deg) rotateY(-45deg) rotateZ(0deg);
    }
    100% {
      transform: rotateX(45deg) rotateY(-45deg) rotateZ(360deg);
    }
  }
  @keyframes rotate2 {
    0% {
      transform: rotateX(45deg) rotateY(45deg) rotateZ(0deg);
    }
    100% {
      transform: rotateX(45deg) rotateY(45deg) rotateZ(360deg);
    }
  }
  @keyframes rotate3 {
    0% {
      transform: rotateX(-60deg) rotateY(0deg) rotateZ(0deg);
    }
    100% {
      transform: rotateX(-60deg) rotateY(0deg) rotateZ(360deg);
    }
  }`;

export default Loader;



================================================
File: src/components/ui/select.css
================================================
.select-trigger {
  display: inline-flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #444; /* Subtle border */
  border-radius: 8px;
  background-color: #1a1a1a; /* Dark background */
  color: #fff; /* White text */
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
  font-family: 'IBM Plex Mono', monospace;
  cursor: pointer;
}

.select-trigger:focus {
  border-color: #8182ed; /* Accent color on focus */
  box-shadow: 0 0 0 3px rgba(129, 130, 237, 0.3); /* Focus ring */
  outline: none;
}

.select-content {
  background-color: #1a1a1a; /* Dark background */
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.select-item {
  padding: 0.75rem 1rem;
  color: #fff; /* White text */
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.select-item:hover {
  background-color: #333; /* Highlight item on hover */
}



================================================
File: src/components/ui/select.jsx
================================================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}>
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}>
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn("p-1", position === "popper" &&
          "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]")}>
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props} />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



================================================
File: src/components/ui/table.css
================================================
/* src/components/ui/table.css */

.table {
  width: 100%; border-collapse: separate; border-spacing: 0;
  color: hsl(var(--foreground)); font-size: 0.9rem; font-family: var(--font-sans);
}

.table th,
.table td {
  padding: 0.8rem 1rem; text-align: left; vertical-align: middle;
  border-bottom: 1px solid hsl(var(--border) / 0.4); /* Even softer border */
}

.table th {
  font-weight: 500; color: hsl(var(--muted-foreground)); background-color: transparent;
  text-transform: uppercase; font-size: 0.75rem; letter-spacing: 0.08em;
  border-bottom-width: 1px; border-color: hsl(var(--border) / 0.6);
}

.table tr:last-child td { border-bottom: none; }
.table tr { transition: background-color 0.15s ease-in-out; }

.table .no-results td {
  text-align: center; color: hsl(var(--muted-foreground)); padding: 2.5rem 1rem;
  background-color: transparent !important; border-bottom: none;
  font-style: italic; font-size: 0.85rem;
}


================================================
File: src/components/ui/table.jsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props} />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props} />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)}
    {...props} />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props} />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props} />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props} />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props} />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



================================================
File: src/components/ui/.DS_Store
================================================
[Non-text file]


================================================
File: src/lib/utils.js
================================================
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}




