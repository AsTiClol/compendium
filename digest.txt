Directory structure:
└── wpp/
    ├── README.md
    ├── components.json
    ├── eslint.config.js
    ├── index.html
    ├── jsconfig.json
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.js
    ├── vercel.json
    ├── vite.config.js
    ├── public/
    │   └── .DS_Store
    └── src/
        ├── App.css
        ├── App.jsx
        ├── index.css
        ├── main.jsx
        ├── supabaseConfig.js
        ├── assets/
        ├── components/
        │   ├── Home.css
        │   ├── Home.jsx
        │   ├── LoginSignupPage.jsx
        │   └── ui/
        │       ├── LandingPage.jsx
        │       ├── button.css
        │       ├── button.jsx
        │       ├── dialog.css
        │       ├── dialog.jsx
        │       ├── hover-border-gradient.jsx
        │       ├── input.css
        │       ├── input.jsx
        │       ├── loader.css
        │       ├── loader.jsx
        │       ├── select.css
        │       ├── select.jsx
        │       ├── table.css
        │       ├── table.jsx
        │       └── .DS_Store
        ├── lib/
        │   └── utils.js
        └── utils/

================================================
File: README.md
================================================
ProximaLink is a knowledge base that allows you to search for links and get summaries of the content.# compendium



================================================
File: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": false,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}


================================================
File: eslint.config.js
================================================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]



================================================
File: index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <link rel="icon" type="image/png" href="/compendium.png">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Compendium</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>



================================================
File: jsconfig.json
================================================
{
    "compilerOptions": {
      // ...
      "baseUrl": ".",
      "paths": {
        "@/*": [
          "./src/*"
        ]
      }
      // ...
    }
  }


================================================
File: package.json
================================================
{
  "name": "proximalink",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@google/generative-ai": "^0.21.0",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-slot": "^1.1.0",
    "@supabase/supabase-js": "^2.46.2",
    "axios": "^1.7.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.6.3",
    "lucide-react": "^0.462.0",
    "motion": "^12.6.3",
    "react": "^18.3.1",
    "react-confetti": "^6.4.0",
    "react-dom": "^18.3.1",
    "react-lottie": "^1.2.10",
    "react-router-dom": "^6.30.0",
    "react-scroll": "^1.9.3",
    "react-toastify": "^11.0.5",
    "styled-components": "^6.1.17",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.15",
    "vite": "^6.0.1"
  }
}



================================================
File: postcss.config.js
================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



================================================
File: tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
export default {
    darkMode: ["class"],
    content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
  	extend: {
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		animation: {
  			'shimmer-slide': 'shimmer-slide var(--speed) ease-in-out infinite alternate',
  			'spin-around': 'spin-around calc(var(--speed) * 2) infinite linear'
  		},
  		keyframes: {
  			'shimmer-slide': {
  				to: {
  					transform: 'translate(calc(100cqw - 100%), 0)'
  				}
  			},
  			'spin-around': {
  				'0%': {
  					transform: 'translateZ(0) rotate(0)'
  				},
  				'15%, 35%': {
  					transform: 'translateZ(0) rotate(90deg)'
  				},
  				'65%, 85%': {
  					transform: 'translateZ(0) rotate(270deg)'
  				},
  				'100%': {
  					transform: 'translateZ(0) rotate(360deg)'
  				}
  			}
  		},
  		backgroundImage: {
  			'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
  		},
  	}
  },
  plugins: [import("tailwindcss-animate")],
}


================================================
File: vercel.json
================================================
{
    "rewrites": [{ "source": "/(.*)", "destination": "/" }]
}


================================================
File: vite.config.js
================================================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
})


================================================
File: public/.DS_Store
================================================
[Non-text file]


================================================
File: src/App.css
================================================
.auth-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #1a1a1a; /* Dark background for black theme */
}

.auth-form {
  background: #2e2e2e; /* Darker shade for form background */
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Slightly darker shadow */
  max-width: 400px;
  width: 100%;
}

.auth-title {
  margin-bottom: 1rem;
  font-size: 1.5rem;
  text-align: center;
  color: #d1c4e9; /* Light purple for text */
}

.auth-input {
  width: 100%;
  padding: 0.5rem;
  margin-bottom: 1rem;
  border: 1px solid #7e57c2; /* Purple border */
  border-radius: 4px;
  background-color: #1a1a1a; /* Dark input background */
  color: #d1c4e9; /* Light purple text */
}

.auth-button {
  width: 100%;
  padding: 0.75rem;
  background-color: #7e57c2; /* Purple button */
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
}

.auth-button:hover {
  background-color: #5e35b1; /* Darker purple on hover */
}



================================================
File: src/App.jsx
================================================
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import LoginSignupPage from './components/LoginSignupPage';
import LandingPage from './components/ui/LandingPage';
import RawHomePage from './components/Home';

import './App.css';

function App() {
  // No authentication state needed for this simple routing setup

  return (
    <BrowserRouter>
      <Routes>
        {/* Default route redirects to login */}
        <Route path="/" element={<Navigate to="/login" replace />} />

        {/* Route for the login page */}
        <Route path="/login" element={<LoginSignupPage />} />

        {/* Route for the landing page */}
        <Route path="/landing" element={<LandingPage />} />

        {/* Route for the raw home page (assuming this is the intended 'Home') */}
        <Route path="/raw/home" element={<RawHomePage />} />

        {/* Catch-all for unmatched routes */}
        <Route path="*" element={<Navigate to="/login" replace />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;



================================================
File: src/index.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  :root {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --radius: 0.5rem
  }
  .light {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }
}
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


================================================
File: src/main.jsx
================================================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)



================================================
File: src/supabaseConfig.js
================================================
import { createClient } from '@supabase/supabase-js'
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseKey = import.meta.env.VITE_SUPABASE_KEY
const supabase = createClient(supabaseUrl, supabaseKey)

export default supabase



================================================
File: src/components/Home.css
================================================
body {
  background-color: #000;
  color: #faf8ff;
  font-family: sans-serif;
  line-height: 1.5;
  font-size: 1.1rem;
  animation: backgroundAnimation 5s infinite alternate;
}

@keyframes backgroundAnimation {
  0% {
    background-color: #000;
  }
  100% {
    background-color: #050505;
  }
}

a {
  color: #8685ef;
  text-decoration: none;
  transition: color 0.2s ease;
  font-family: sans-serif;
}

a:hover {
  color: #6b6ae0;
  font-family: sans-serif;
}

.home-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  position: relative;
  font-family: sans-serif;
  text-align: center;
}

.company-logo {
  position: relative;
  top: 0;
  left: 0;
  width: 220px;
  height: auto;
  margin: 0;
  display: block;
  text-align: left;
}

.compendium-title, .search-modal-title {
  color: #faf8ff;
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  text-align: center;
  font-family: sans-serif;
}

.input-group, .search-input-group {
  display: flex;
  align-items: center;
  gap: 1rem;
  max-width: 800px;
  margin: 0 auto 2rem;
  font-family: sans-serif;
}

.input {
  background-color: #1a1a1a;
  color: #faf8ff;
  border: 1px solid #2d2d2d;
  border-radius: 0.5rem;
  padding: 0.75rem 1rem;
  flex: 1;
  transition: border-color 0.2s ease;
  font-family: sans-serif;
}

.input:focus {
  outline: none;
  border-color: #8685ef;
  font-family: sans-serif;
}

.button-group .add-link-button,
.button-group .look-deeper-button,
.search-button,
.close-button {
  background-color: #000;
  color: #fff;
  border: 2px solid #6b6ae0;
  border-radius: 1.5rem;
  padding: 0.75rem 1.25rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  font-family: sans-serif;
  font-size: 1rem;
  position: relative;
  overflow: hidden;
}

.button-group .add-link-button::before,
.button-group .look-deeper-button::before,
.search-button::before,
.close-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, rgba(107,106,224,0.8) 0%, rgba(134,133,239,0.8) 50%, rgba(107,106,224,0.8) 100%);
  z-index: -1;
  transform: translateX(-100%);
  transition: transform 0.4s ease;
  border-radius: 1.5rem;
}

.button-group .add-link-button:hover,
.button-group .look-deeper-button:hover,
.search-button:hover,
.close-button:hover {
  color: #fff;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
}

.button-group .add-link-button:hover::before,
.button-group .look-deeper-button:hover::before,
.search-button:hover::before,
.close-button:hover::before {
  transform: translateX(0);
}

.table-container {
  margin: 2rem auto;
  max-width: 1200px;
  overflow-x: auto;
  background-color: #1a1a1a;
  border-radius: 0.5rem;
  padding: 1rem;
  font-family: sans-serif;
}

.table-row {
  cursor: pointer;
  transition: background-color 0.2s ease;
  font-family: sans-serif;
}

.table-row:hover {
  background-color: #2d2d2d;
  font-family: sans-serif;
}

.table-cell {
  padding: 1rem;
  border-bottom: 1px solid #2d2d2d;
  font-family: sans-serif;
  text-align: left;
}

.no-results {
  text-align: center;
  padding: 2rem;
  color: #a1a1aa;
  font-family: sans-serif;
}

.search-bar {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin: 2rem auto;
  max-width: 800px;
  font-family: sans-serif;
}

.search-icon {
  color: #faf8ff;
  width: 1.5rem;
  height: 1.5rem;
  font-family: sans-serif;
}



================================================
File: src/components/Home.jsx
================================================
import { Input } from "./ui/input"
import { Button } from "./ui/button"
import { HoverBorderGradient } from "./ui/hover-border-gradient"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "./ui/table"
import supabase from "../supabaseConfig"
import { useState, useEffect } from "react"
import axios from "axios"
import { cn } from "../lib/utils"
import { Search, Plus } from "lucide-react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "./ui/dialog"
import './Home.css'

function Home() {
  const [searchQuery, setSearchQuery] = useState("")
  const [links, setLinks] = useState([])
  const [searchResults, setSearchResults] = useState([])
  const [isSearchOpen, setIsSearchOpen] = useState(false)
  const [newLink, setNewLink] = useState("")
  const [isAddingLink, setIsAddingLink] = useState(false)
  const [isSearching, setIsSearching] = useState(false)
  const [expandedRows, setExpandedRows] = useState({})
  const [isMobile, setIsMobile] = useState(window.innerWidth < 640)
  const [tableSearchQuery, setTableSearchQuery] = useState("")
  const [searchResultCount, setSearchResultCount] = useState("3")
  const [showExistingLinkDialog, setShowExistingLinkDialog] = useState(false)

  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth < 640);
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  useEffect(() => {
    fetchLinks();
  }, [tableSearchQuery]);

  const fetchLinks = async () => {
    try {
      let query = supabase
        .from('links')
        .select('id, url, summary, created_at')
        .order('created_at', { ascending: false });

      if (tableSearchQuery) {
        query = query.or(`url.ilike.%${tableSearchQuery}%,summary.ilike.%${tableSearchQuery}%`);
      }

      const { data, error } = await query;

      if (error) {
        console.error("Error fetching links:", error);
        return;
      }
      setLinks(data || []);
    } catch (error) {
      console.error("Error fetching links:", error);
    }
  };

  const handleSubmit = async () => {
    if (!newLink.trim()) {
      alert("Please enter a valid link.");
      return;
    }

    setIsAddingLink(true);
    try {
      const { data: existingLinks, error } = await supabase
        .from('links')
        .select('url')
        .eq('url', newLink)
        .limit(1);

      if (error) {
        console.error("Error checking existing link:", error);
        alert("Error checking existing link. Please try again.");
        setIsAddingLink(false);
        return;
      }

      if (existingLinks && existingLinks.length > 0) {
        setShowExistingLinkDialog(true);
        setTableSearchQuery(newLink);
        setNewLink("");
        setIsAddingLink(false);
        return;
      }

      const response = await axios.post('http://localhost:8000/summarize', {
        url: newLink
      }, {
        timeout: 30000
      });

      const { data: insertData, error: insertError } = await supabase
        .from('links')
        .insert([{ url: newLink, summary: response.data.summary }]);

      if (insertError) {
        console.error("Error inserting link:", insertError);
        alert("Error inserting link. Please try again.");
      } else {
        setNewLink("");
        await fetchLinks();
      }

    } catch (error) {
      if (axios.isCancel(error)) {
        console.log("Request canceled:", error.message);
      } else if (error.code === 'ECONNABORTED') {
        alert("The request timed out (30 seconds). The server might be busy or the URL is slow to respond. Please try again.");
      } else if (error.response) {
        console.error("Server Error:", error.response.data, error.response.status);
        alert(`Server error: ${error.response.status}. Check the console for more details.`);
      } else if (error.request) {
        console.error("Network Error:", error.request);
        alert("Network error. Could not reach the backend server (http://localhost:8000). Is it running?");
      } else {
        console.error("Error:", error.message);
        alert("An unexpected error occurred while processing the link. Please try again.");
      }
    } finally {
      setIsAddingLink(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSubmit();
    }
  };

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      alert("Please enter a valid search query.");
      return;
    }

    setIsSearching(true);
    setSearchResults([]);
    try {
      const response = await axios.post('http://localhost:8000/search', {
        query: searchQuery,
        k: parseInt(searchResultCount)
      }, {
        timeout: 30000
      });

      const { matches } = response.data;

      if (!matches || !matches.length) {
        return;
      }

      const { data, error } = await supabase
        .from('links')
        .select('id, url, summary, created_at')
        .in('id', matches);

      if (error) {
        console.error("Error fetching search results from Supabase:", error);
        alert("Error fetching search result details. Please try again.");
      } else if (data) {
        const uniqueLinks = data.filter(link => link != null);
        const seenIds = new Set();
        const uniqueFilteredLinks = uniqueLinks.filter(el => {
          const duplicate = seenIds.has(el.id);
          seenIds.add(el.id);
          return !duplicate;
        });

        const sortedResults = matches
          .map(id => uniqueFilteredLinks.find(link => link.id === id))
          .filter(link => link != null);

        setSearchResults(sortedResults);
      } else {
        setSearchResults([]);
      }

    } catch (error) {
      if (axios.isCancel(error)) {
        console.log("Search request canceled:", error.message);
      } else if (error.code === 'ECONNABORTED') {
        alert("The search request timed out (30 seconds). Please try again.");
      } else if (error.response) {
        console.error("Server Error during search:", error.response.data, error.response.status);
        alert(`Server error during search: ${error.response.status}. Check the console.`);
      } else if (error.request) {
        console.error("Network Error during search:", error.request);
        alert("Network error during search. Could not reach the backend server (http://localhost:8000).");
      } else {
        console.error("Error during search:", error.message);
        alert("An unexpected error occurred during search. Please try again.");
      }
    } finally {
      setIsSearching(false);
    }
  };

  const handleSearchKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  const toggleRowExpansion = (id) => {
    setExpandedRows(prev => ({ ...prev, [id]: !prev[id] }));
  };

  const renderSummary = (summary, id) => {
    if (!summary) return '';
    if (expandedRows[id]) {
      return summary;
    }
    const maxLength = isMobile ? 50 : 100;
    return summary.length > maxLength ? summary.slice(0, maxLength) + '...' : summary;
  };

  return (
    <>
      <div className="home-container">
        <img src={logo} alt="Company Logo" className="company-logo" />
        <Dialog open={showExistingLinkDialog} onOpenChange={setShowExistingLinkDialog}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Link Already Exists</DialogTitle>
              <DialogDescription>
                This link is already in the database. You can find it by searching or scrolling below.
              </DialogDescription>
            </DialogHeader>
            <Button
              onClick={() => setShowExistingLinkDialog(false)}
              className="purple-gradient-button w-full mt-4"
            >
              Close
            </Button>
          </DialogContent>
        </Dialog>

        <div className="compendium">
          <h2 className="compendium-title">Our Product</h2>
          <div className="input-group">
            <Input
              type="text"
              placeholder="Enter your link here..."
              value={newLink}
              onChange={(e) => setNewLink(e.target.value)}
              onKeyPress={handleKeyPress}
              className="input"
            />
            <div className="button-group">
              <Button
                onClick={handleSubmit}
                disabled={isAddingLink || !newLink.trim()}
                className="purple-gradient-button"
              >
                {isAddingLink ? 'Processing...' : <><Plus className="icon mr-1" size={16} />Add Link</>}
              </Button>
              <Button
                onClick={() => setIsSearchOpen(true)}
                className="purple-gradient-button"
              >
                <Search className="icon mr-1" size={16} />Look Deeper
              </Button>
            </div>
          </div>
        </div>

        {isSearchOpen && (
          <div className="search-modal">
            <div className="search-modal-content">
              <h2 className="search-modal-title">Query through Compendium's Knowledge Base</h2>
              <div className="search-input-group">
                <Input
                  type="text"
                  placeholder="Describe what you're looking for..."
                  className="input"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={handleSearchKeyPress}
                />
                <Select value={searchResultCount} onValueChange={setSearchResultCount}>
                  <SelectTrigger className="select-trigger">
                    <SelectValue placeholder="Result count" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="3">3 results</SelectItem>
                    <SelectItem value="5">5 results</SelectItem>
                    <SelectItem value="10">10 results</SelectItem>
                  </SelectContent>
                </Select>
                <Button
                  onClick={handleSearch}
                  disabled={isSearching || !searchQuery.trim()}
                  className="purple-gradient-button"
                >
                  {isSearching ? 'Searching...' : <><Search className="icon mr-1" size={16} />Search</>}
                </Button>
              </div>
              <div className="table-container">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>URL</TableHead>
                      <TableHead>Summary</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {isSearching ? (
                       <TableRow>
                          <TableCell colSpan={2} className="no-results text-center">Searching...</TableCell>
                       </TableRow>
                    ) : searchResults.length > 0 ? (
                      searchResults.map((link) => (
                        <TableRow key={link.id} onClick={() => toggleRowExpansion(link.id)} className="table-row">
                          <TableCell className="table-cell url-cell">
                            <a href={link.url} target="_blank" rel="noopener noreferrer" className="link">
                              {link.url}
                            </a>
                          </TableCell>
                          <TableCell className="table-cell summary-cell">{renderSummary(link.summary, link.id)}</TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={2} className="no-results text-center">No results found</TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </div>
              <Button
                onClick={() => setIsSearchOpen(false)}
                className="purple-gradient-button mt-4"
              >
                Close
              </Button>
            </div>
          </div>
        )}

        <div className="search-bar">
          <Search className="search-icon" />
          <Input
            type="text"
            placeholder="Search links..."
            value={tableSearchQuery}
            onChange={(e) => setTableSearchQuery(e.target.value)}
            className="input"
          />
        </div>

        <div className="table-container">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>URL</TableHead>
                <TableHead>Summary</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {links.length > 0 ? (
                 links.map((link) => (
                  <TableRow key={link.id} onClick={() => toggleRowExpansion(link.id)} className="table-row">
                    <TableCell className="table-cell url-cell">
                      <a href={link.url} target="_blank" rel="noopener noreferrer" className="link">
                        {link.url}
                      </a>
                    </TableCell>
                    <TableCell className="table-cell summary-cell">{renderSummary(link.summary, link.id)}</TableCell>
                  </TableRow>
                 ))
              ) : (
                <TableRow>
                   <TableCell colSpan={2} className="no-results text-center">
                       {tableSearchQuery ? 'No links found matching your search.' : 'No links available.'}
                   </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      </div>
    </>
  )
}

export default Home


================================================
File: src/components/LoginSignupPage.jsx
================================================
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import Loader from '@/components/ui/Loader';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const LoginSignupPage = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [particles, setParticles] = useState([]);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);

  const navigate = useNavigate();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Toggle password visibility
  const togglePasswordVisibility = () => {
    setShowPassword(prev => !prev);
  };

  // Toggle confirm password visibility
  const toggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword(prev => !prev);
  };

  // Generate background particles
  useEffect(() => {
    let intervalId;

    const generateParticles = () => {
      const newParticles = [];
      const particleCount = 50;

      for (let i = 0; i < particleCount; i++) {
        newParticles.push({
          id: i,
          x: Math.random() * 100,
          y: Math.random() * 100,
          size: Math.random() * 10 + 2,
          speed: Math.random() * 0.3 + 0.1,
          opacity: Math.random() * 0.5 + 0.1,
        });
      }

      setParticles(newParticles);
    };

    generateParticles();

    intervalId = setInterval(() => {
      setParticles(prevParticles =>
        prevParticles.map(particle => {
          let newX = particle.x + (Math.random() * 0.2 - 0.1);
          let newOpacity = particle.opacity + (Math.random() * 0.05 - 0.025);

          if (newX < 0) newX = 0;
          if (newX > 100) newX = 100;
          if (newOpacity < 0) newOpacity = 0;
          if (newOpacity > 1) newOpacity = 1;

          return {
            ...particle,
            y: (particle.y + particle.speed) % 100,
            x: newX,
            opacity: newOpacity,
          };
        })
      );
    }, 50);

    return () => clearInterval(intervalId);
  }, []);

  const validateForm = () => {
    if (isLogin) {
      if (!formData.email || !formData.password) {
        setError('Please enter both email and password');
        return false;
      }
      if (formData.password.length < 6) {
        setError('Password must be at least 6 characters');
        return false;
      }
    } else {
      if (!formData.name) {
        setError('Please enter your name');
        return false;
      }
      if (!formData.email) {
        setError('Please enter your email');
        return false;
      }
      if (!formData.password) {
        setError('Please enter a password');
        return false;
      }
      if (!formData.confirmPassword) {
        setError('Please confirm your password');
        return false;
      }
      if (formData.password !== formData.confirmPassword) {
        setError('Passwords do not match');
        return false;
      }
      if (formData.password.length < 6) {
        setError('Password must be at least 6 characters');
        return false;
      }
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(formData.email)) {
        setError('Please enter a valid email address');
        return false;
      }
      const hasUpperCase = /[A-Z]/.test(formData.password);
      const hasLowerCase = /[a-z]/.test(formData.password);
      const hasNumbers = /\d/.test(formData.password);
      const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(formData.password);
      if (!hasUpperCase || !hasLowerCase || !hasNumbers || !hasSpecialChar) {
        setError('Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character');
        return false;
      }
    }
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    
    if (!validateForm()) {
      return;
    }

    if (isLogin) {
      // Show success notification immediately
      toast.success('Login Successful!', {
        position: "bottom-right",
        autoClose: 2000,
        hideProgressBar: false,
      });

      // Store user data in localStorage
      localStorage.setItem('userName', formData.name);
      localStorage.setItem('userEmail', formData.email);

      // Show loader
      setLoading(true);

      // Wait for notification to show and then navigate
      setTimeout(() => {
        navigate('/landing');
      }, 2000);
    } else {
      // Only check server for signup
      try {
        const endpoint = '/api/signup';
        const response = await fetch(endpoint, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            name: formData.name,
            email: formData.email,
            password: formData.password
          }),
        });

        const data = await response.json();

        if (response.ok) {
          setSuccess('Account created successfully! You can now log in.');
          setIsLogin(true);
          setFormData({
            name: '',
            email: '',
            password: '',
            confirmPassword: ''
          });
        } else {
          setError(data.message || 'Signup failed');
        }
      } catch (err) {
        setError('Failed to connect to the server');
      }
    }
  };

  const toggleMode = () => {
    setIsLogin(!isLogin);
    setError('');
    setSuccess('');
    setFormData({
      name: '',
      email: '',
      password: '',
      confirmPassword: ''
    });
  };

  // SVG Components for icons
  const GoogleIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 48 48">
      <path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"></path><path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"></path><path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"></path><path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"></path>
    </svg>
  );

  const TwitterIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="currentColor" className="text-white">
      <path d="M23.643 4.937c-.835.37-1.732.62-2.675.733.962-.576 1.664-1.485 2.022-2.575-.9.534-1.897.922-2.958 1.13-.85-.904-2.06-1.47-3.417-1.47-2.576 0-4.654 2.078-4.654 4.654 0 .364.042.718.12 1.06-3.873-.195-7.304-2.05-9.602-4.868-.4.69-.63 1.49-.63 2.342 0 1.616.823 3.043 2.072 3.879-.764-.025-1.482-.234-2.112-.583v.06c0 2.257 1.605 4.14 3.737 4.568-.392.106-.803.162-1.227.162-.3 0-.593-.028-.877-.082.593 1.85 2.313 3.198 4.352 3.234-1.595 1.25-3.604 1.995-5.786 1.995-.376 0-.747-.022-1.112-.065 2.062 1.323 4.511 2.093 7.14 2.093 8.57 0 13.255-7.098 13.255-13.254 0-.201-.005-.402-.014-.602.916-.66 1.705-1.478 2.323-2.41z" />
    </svg>
  );

  const EyeIcon = ({ visible }) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="20"
      height="20"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      {visible ? (
        <>
          <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z" />
          <circle cx="12" cy="12" r="3" />
        </>
      ) : (
        <>
          <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24" />
          <line x1="1" y1="1" x2="23" y2="23" />
        </>
      )}
    </svg>
  );

  return (
    <div className="flex items-center justify-center min-h-screen w-screen bg-black text-white relative overflow-hidden">
      <ToastContainer
        position="bottom-right"
        autoClose={2000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="dark"
      />

      {/* Show loader if loading */}
      {loading ? (
        <Loader />
      ) : (
        <>
          {/* Animated background particles */}
          <div className="absolute inset-0 overflow-hidden bg-black">
            {particles.map(particle => (
              <div
                key={particle.id}
                className="absolute rounded-full"
                style={{
                  left: `${particle.x}%`,
                  top: `${particle.y}%`,
                  width: `${particle.size}px`,
                  height: `${particle.size}px`,
                  opacity: particle.opacity,
                  filter: 'blur(1px)',
                  backgroundColor: '#8685ef',
                }}
              />
            ))}
          </div>

          {/* Glass card effect */}
          <div className={`relative z-10 w-full p-8 ${isLogin ? 'bg-black bg-opacity-90' : 'bg-black bg-opacity-90'} backdrop-blur-md rounded-2xl shadow-2xl border border-gray-800 max-w-md mx-auto`}>
            <div className="mb-8 text-center">
              <h1 className="text-3xl font-bold" style={{ color: '#8685ef', fontFamily: 'IBM Plex Mono, monospace' }}>
                {isLogin ? 'Welcome Back' : 'Create Account'}
              </h1>
              <p className="mt-2 text-white" style={{ fontFamily: 'IBM Plex Mono, monospace' }}>
                {isLogin ? 'Sign in to continue' : 'Get started by creating your account'}
              </p>
            </div>

            {error && (
              <div className="mb-4 p-3 bg-black bg-opacity-80 border border-red-500 rounded-lg text-red-400" style={{ fontFamily: 'IBM Plex Mono, monospace' }}>
                {error}
              </div>
            )}

            {success && (
              <div className="mb-4 p-3 bg-black bg-opacity-80 border border-green-500 rounded-lg text-green-400" style={{ fontFamily: 'IBM Plex Mono, monospace' }}>
                {success}
              </div>
            )}

            <form onSubmit={handleSubmit} className="w-full">
              <div className="mb-4">
                <label className="block mb-2 text-sm text-white" htmlFor="name" style={{ fontFamily: 'IBM Plex Mono, monospace' }}>
                  Your Name
                </label>
                <input
                  id="name"
                  name="name"
                  type="text"
                  className="w-full px-4 py-3 bg-black border border-gray-800 rounded-lg focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500 transition-all text-white"
                  placeholder="Enter your name"
                  value={formData.name}
                  onChange={handleChange}
                  style={{ fontFamily: 'IBM Plex Mono, monospace' }}
                  autoComplete="off"
                />
              </div>

              <div className="mb-4">
                <label className="block mb-2 text-sm text-white" htmlFor="email" style={{ fontFamily: 'IBM Plex Mono, monospace' }}>
                  Email Address
                </label>
                <input
                  id="email"
                  name="email"
                  type="email"
                  className="w-full px-4 py-3 bg-black border border-gray-800 rounded-lg focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500 transition-all text-white"
                  placeholder="Enter your email"
                  value={formData.email}
                  onChange={handleChange}
                  style={{ fontFamily: 'IBM Plex Mono, monospace' }}
                  autoComplete="off"
                />
              </div>

              <div className="mb-4">
                <label className="block mb-2 text-sm text-white" htmlFor="password" style={{ fontFamily: 'IBM Plex Mono, monospace' }}>
                  Password
                </label>
                <div className="relative">
                  <input
                    id="password"
                    name="password"
                    type={showPassword ? "text" : "password"}
                    className="w-full px-4 py-3 bg-black border border-gray-800 rounded-lg focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500 transition-all text-white pr-12"
                    placeholder="Password"
                    value={formData.password}
                    onChange={handleChange}
                    style={{ fontFamily: 'IBM Plex Mono, monospace' }}
                    autoComplete="new-password"
                  />
                  <button
                    type="button"
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-purple-400"
                    onClick={togglePasswordVisibility}
                  >
                    <EyeIcon visible={showPassword} />
                  </button>
                </div>
              </div>

              {!isLogin && (
                <div className="mb-4">
                  <label className="block mb-2 text-sm text-white" htmlFor="confirmPassword" style={{ fontFamily: 'IBM Plex Mono, monospace' }}>
                    Confirm Password
                  </label>
                  <div className="relative">
                    <input
                      id="confirmPassword"
                      name="confirmPassword"
                      type={showConfirmPassword ? "text" : "password"}
                      className="w-full px-4 py-3 bg-black border border-gray-800 rounded-lg focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500 transition-all text-white pr-12"
                      placeholder="Confirm Password"
                      value={formData.confirmPassword}
                      onChange={handleChange}
                      style={{ fontFamily: 'IBM Plex Mono, monospace' }}
                      autoComplete="new-password"
                    />
                    <button
                      type="button"
                      className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-purple-400"
                      onClick={toggleConfirmPasswordVisibility}
                    >
                      <EyeIcon visible={showConfirmPassword} />
                    </button>
                  </div>
                </div>
              )}

              {isLogin && (
                <div className="mb-6 text-right">
                  <a
                    href="#"
                    className="text-sm text-purple-400 hover:text-purple-300 transition-colors"
                    onClick={(e) => { e.preventDefault(); }}
                    style={{ fontFamily: 'IBM Plex Mono, monospace' }}
                  >
                    Forgot Password?
                  </a>
                </div>
              )}

              <button
                type="submit"
                className={`w-full py-3 px-4 rounded-lg font-medium transition-all duration-300 text-white disabled:opacity-50 ${isLogin ? 'bg-purple-500 hover:bg-purple-600 shadow-purple-md' : 'bg-purple-500 hover:bg-purple-600 shadow-purple-md'}`}
                style={{
                  boxShadow: isLogin ? '0 4px 20px rgba(134, 133, 239, 0.3)' : '0 4px 20px rgba(134, 133, 239, 0.3)',
                  fontFamily: 'IBM Plex Mono, monospace'
                }}
                disabled={loading}
              >
                {loading ? 'Loading...' : (isLogin ? 'Sign In' : 'Create Account')}
              </button>
            </form>

            <div className="mt-6 text-center">
              <p className="text-white" style={{ fontFamily: 'IBM Plex Mono, monospace' }}>
                {isLogin ? "Don't have an account?" : "Already have an account?"}
                <button
                  onClick={toggleMode}
                  className="ml-2 font-medium transition-colors"
                  style={{ color: '#8685ef', fontFamily: 'IBM Plex Mono, monospace' }}
                >
                  {isLogin ? 'Sign Up' : 'Sign In'}
                </button>
              </p>
            </div>

            {isLogin && (
              <div className="mt-8 pt-6 border-t border-gray-800">
                <p className="mb-4 text-center text-sm text-white" style={{ fontFamily: 'IBM Plex Mono, monospace' }}>Or continue with</p>
                <div className="flex justify-center space-x-4">
                  <button
                    className="flex items-center justify-center px-4 py-2 rounded-lg bg-black border border-gray-800 hover:border-purple-500 transition-colors text-white"
                    onClick={(e) => { e.preventDefault(); }}
                  >
                    <GoogleIcon />
                    <span className="ml-2" style={{ fontFamily: 'IBM Plex Mono, monospace' }}>Google</span>
                  </button>
                  <button
                    className="flex items-center justify-center px-4 py-2 rounded-lg bg-black border border-gray-800 hover:border-purple-500 transition-colors text-white"
                    onClick={(e) => { e.preventDefault(); }}
                  >
                    <TwitterIcon />
                    <span className="ml-2" style={{ fontFamily: 'IBM Plex Mono, monospace' }}>Twitter</span>
                  </button>
                </div>
              </div>
            )}
          </div>
        </>
      )}
    </div>
  );
};

export default LoginSignupPage;


================================================
File: src/components/ui/LandingPage.jsx
================================================
"use client"

import { useState, useEffect, useRef } from "react"
import { motion, useScroll, useTransform, useSpring, useInView } from "framer-motion"
import { Link } from "react-scroll"
import { useNavigate } from "react-router-dom"

// Typewriter component
const Typewriter = ({ text, className }) => {
  const [displayText, setDisplayText] = useState("");
  const [currentIndex, setCurrentIndex] = useState(0);

  useEffect(() => {
    if (currentIndex < text.length) {
      const timeout = setTimeout(() => {
        setDisplayText(prev => prev + text[currentIndex]);
        setCurrentIndex(prev => prev + 1);
      }, 50);

      return () => clearTimeout(timeout);
    }
  }, [currentIndex, text]);

  return (
    <motion.h2 
      className={className}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      {displayText}
      <motion.span
        animate={{ opacity: [0, 1, 0] }}
        transition={{ repeat: Infinity, duration: 1 }}
      >
        |
      </motion.span>
    </motion.h2>
  );
};

const LandingPage = () => {
  const navigate = useNavigate()
  const [isScrolled, setIsScrolled] = useState(false)
  const { scrollYProgress } = useScroll({
    offset: ["start start", "end start"],
    layoutEffect: false
  })

  const opacity = useTransform(scrollYProgress, [0, 0.2], [1, 0], {
    clamp: false
  })
  const scale = useTransform(scrollYProgress, [0, 0.2], [1, 0.9], {
    clamp: false
  })
  const y = useTransform(scrollYProgress, [0, 0.2], [0, -50], {
    clamp: false
  })

  // Smooth scroll tracer
  const scroller = useSpring(scrollYProgress, {
    stiffness: 100,
    damping: 30,
    restDelta: 0.001,
    mass: 0.5
  })

  // Handle navbar background change on scroll
  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 50) {
        setIsScrolled(true)
      } else {
        setIsScrolled(false)
      }
    }

    window.addEventListener("scroll", handleScroll)
    return () => window.removeEventListener("scroll", handleScroll)
  }, [])

  // Reset scroll position on mount
  useEffect(() => {
    window.scrollTo(0, 0)
  }, [])

  // FAQ accordion state
  const [activeIndex, setActiveIndex] = useState(null)

  const toggleAccordion = (index) => {
    setActiveIndex(activeIndex === index ? null : index)
  }

  // Features data
  const features = [
    {
      title: "User-Driven Link Addition",
      description: "Empower your community to contribute knowledge with our simple link-sharing system.",
      icon: (
        <svg
          className="w-10 h-10"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"
          />
        </svg>
      ),
    },
    {
      title: "Smart Filters and Search",
      description: "Organize and filter content by tags, categories, and custom attributes for quick access.",
      icon: (
        <svg
          className="w-10 h-10"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"
          />
        </svg>
      ),
    },
    {
      title: "AI-Powered Contextual Search",
      description:
        "Find exactly what you need with our intelligent RAG-based search that understands context and relevance.",
      icon: (
        <svg
          className="w-10 h-10"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
          />
        </svg>
      ),
    },
    {
      title: "Centralized Clean Dashboard",
      description: "Access all your community's shared knowledge in one beautifully designed, intuitive interface.",
      icon: (
        <svg
          className="w-10 h-10"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
          />
        </svg>
      ),
    },
  ]

  // Update testimonials data
  const testimonials = [
    {
      name: "Priya R.",
      title: "Community Manager",
      text: "This solved our biggest community pain point.",
    },
    {
      name: "Rajat K.",
      title: "Product Lead",
      text: "The AI search is mind-blowing.",
    },
    {
      name: "Anjali S.",
      title: "Team Lead",
      text: "No more scrolling through chats.",
    },
    {
      name: "Kunal V.",
      title: "Developer",
      text: "Love the interface!",
    },
    {
      name: "Rhea M.",
      title: "Content Creator",
      text: "Organizing links has never been easier.",
    },
    {
      name: "Mohit J.",
      title: "UX Designer",
      text: "Beautifully executed platform.",
    },
    {
      name: "Sneha D.",
      title: "Marketing Head",
      text: "Increased productivity across teams.",
    },
    {
      name: "Vikram A.",
      title: "Project Manager",
      text: "Seamless integration with our existing tools.",
    },
    {
      name: "Divya Patel",
      title: "Data Analyst",
      text: "The analytics dashboard provides valuable insights.",
    },
    {
      name: "Aryan Singh",
      title: "Software Engineer",
      text: "Easy to use and highly efficient.",
    },
  ]

  // FAQ data
  const faqs = [
    {
      question: "Can I use Compendium for personal use?",
      answer:
        "While Compendium was designed with communities in mind, many individuals use it to organize their own collection of links and resources.",
    },
    {
      question: "Is there a mobile version?",
      answer:
        "Yes, Compendium is fully responsive and works on all devices. We also have native mobile apps for iOS and Android for an even better mobile experience.",
    },
    {
      question: "What powers the AI search?",
      answer:
        "Our search is powered by a custom-built Retrieval Augmented Generation (RAG) system that understands the context of your query and retrieves the most relevant links from your collection.",
    },
    {
      question: "Can I import old links?",
      answer:
        "Yes! Compendium allows you to bulk import links from various sources including browser bookmarks, spreadsheets, and even directly from chat platforms like WhatsApp and Telegram.",
    },
    {
      question: "How secure is my data?",
      answer:
        "We employ industry-standard security measures, including encryption and regular backups, to ensure your data is always safe and protected.",
    },
    {
      question: "Is there a limit to the number of links I can store?",
      answer:
        "The number of links you can store depends on your chosen pricing plan. Our Pro and Enterprise plans offer unlimited link storage.",
    },
    
    {
      question: "What kind of support do you offer?",
      answer:
        "We offer comprehensive support through email, chat, and a detailed knowledge base. Priority support is available for Pro and Enterprise users.",
    },
  ]

  // Pricing plans
  const pricingPlans = [
    {
      name: "Free",
      price: "₹0",
      period: "forever",
      features: ["Up to 500 links", "Basic search", "3 team members", "Community support"],
      cta: "Get Started",
      popular: false,
    },
    {
      name: "Pro",
      price: "₹299",
      period: "per month",
      features: [
        "Unlimited links",
        "AI-powered search",
        "Up to 20 team members",
        "Priority support",
        "Advanced analytics",
      ],
      cta: "Start Free Trial",
      popular: true,
    },
    {
      name: "Enterprise",
      price: "Custom",
      period: "pricing",
      features: [
        "Unlimited everything",
        "Dedicated support",
        "Custom integrations",
        "SSO & advanced security",
        "SLA guarantees",
      ],
      cta: "Contact Sales",
      popular: false,
    },
  ]

  // Animation variants
  const fadeInUp = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.6 } },
  }

  const staggerContainer = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
      },
    },
  }

  // Refs for section animations
  const heroRef = useRef(null)
  const aboutRef = useRef(null)
  const featuresRef = useRef(null)
  const testimonialsRef = useRef(null)
  const pricingRef = useRef(null)
  const faqRef = useRef(null)
  const forumRef = useRef(null)
  const contactRef = useRef(null)

  const heroInView = useInView(heroRef, { once: true, amount: 0.3 })
  const aboutInView = useInView(aboutRef, { once: true, amount: 0.3 })
  const featuresInView = useInView(featuresRef, { once: true, amount: 0.3 })
  const testimonialsInView = useInView(testimonialsRef, { once: true, amount: 0.3 })
  const pricingInView = useInView(pricingRef, { once: true, amount: 0.3 })
  const faqInView = useInView(faqRef, { once: true, amount: 0.3 })
  const forumInView = useInView(forumRef, { once: true, amount: 0.3 })
  const contactInView = useInView(contactRef, { once: true, amount: 0.3 })

  // Update forum topics data to include avatars
  const forumTopics = [
    {
      title: "Getting Started with Compendium",
      author: "Priya Sharma",
      replies: 24,
      lastActivity: "2 hours ago",
      category: "Guides",
      content: "I'm new to Compendium and would love to hear some tips on how to get started. What features should I explore first?",
      repliesList: [
        {
          author: "Arjun Patel",
          time: "1 hour ago",
          content: "Welcome! I'd recommend starting with the link organization features. They're super intuitive and will help you get the most out of Compendium right away.",
          likes: 12,
        },
        {
          author: "Meera Desai",
          time: "45 minutes ago",
          content: "Don't forget to check out the AI search feature - it's a game changer for finding specific content in your collection.",
          likes: 8,
        }
      ]
    },
    {
      title: "Best Practices for Link Organization",
      author: "Rahul Verma",
      replies: 18,
      lastActivity: "5 hours ago",
      category: "Tips & Tricks",
      content: "What's everyone's favorite way to organize their links? Looking for some inspiration!",
      repliesList: [
        {
          author: "Ananya Singh",
          time: "4 hours ago",
          content: "I use a combination of tags and categories. Tags for quick filtering, categories for broader organization.",
          likes: 15,
        },
        {
          author: "Vikram Reddy",
          time: "3 hours ago",
          content: "I create custom collections for different projects. Makes it easy to share with team members.",
          likes: 9,
        }
      ]
    },
    {
      title: "AI Search Feature Discussion",
      author: "Neha Kapoor",
      replies: 32,
      lastActivity: "1 day ago",
      category: "Features",
      content: "The new AI search is amazing! How is everyone using it?",
      repliesList: [
        {
          author: "Aditya Kumar",
          time: "20 hours ago",
          content: "I use it to find old resources I've saved but can't remember the exact title of. Saves so much time!",
          likes: 21,
        },
        {
          author: "Ishaan Malhotra",
          time: "18 hours ago",
          content: "The contextual understanding is impressive. It finds related content I didn't even know I had.",
          likes: 17,
        }
      ]
    },
    {
      title: "Share Your Favorite Use Cases",
      author: "Compendium Team",
      replies: 7,
      lastActivity: "3 days ago",
      category: "Announcements",
      content: "We'd love to hear how you're using Compendium in your daily workflow. Share your most creative and efficient use cases!",
      repliesList: [
        {
          author: "Sakshi Iyer",
          time: "2 days ago",
          content: "I've created a collection of resources for onboarding new team members. It's saved me so much time and effort!",
          likes: 5,
        },
        {
          author: "Gaurav Menon",
          time: "1 day ago",
          content: "I use Compendium to curate research papers for my academic projects. The AI search helps me find relevant information quickly.",
          likes: 3,
        }
      ]
    }
  ]

  const [expandedTopic, setExpandedTopic] = useState(null);
  const [newReplies, setNewReplies] = useState({});
  const [replyInputs, setReplyInputs] = useState({});

  const toggleTopic = (index) => {
    setExpandedTopic(expandedTopic === index ? null : index);
  };

  const handleReplyChange = (topicIndex, value) => {
    setReplyInputs(prev => ({
      ...prev,
      [topicIndex]: value
    }));
  };

  const handleAddReply = (topicIndex) => {
    if (!replyInputs[topicIndex]?.trim()) return;

    const userName = localStorage.getItem('userName') || 'Anonymous';

    const newReply = {
      author: userName,
      time: "Just now",
      content: replyInputs[topicIndex],
      likes: 0,
    };

    setNewReplies(prev => ({
      ...prev,
      [topicIndex]: [...(prev[topicIndex] || []), newReply]
    }));

    setReplyInputs(prev => ({
      ...prev,
      [topicIndex]: ""
    }));
  };

  const handleGetStarted = () => {
    navigate('/components/ui/Home')
  }

  const handleViewProduct = () => {
    navigate('/components/ui/Home')
  }

  // Update the testimonials section JSX
  return (
    <div className="bg-transparent text-white min-h-screen font-['IBM_Plex_Mono',monospace]">
      {/* Grid Background */}
      <div className="fixed inset-0 z-0">
        <div className="absolute inset-0 bg-gradient-to-br from-[#080808] via-[#0a0a0a] to-[#080808]"></div>
        <div className="absolute inset-0 opacity-[0.1]">
          <div
            className="absolute inset-0"
            style={{
              backgroundImage: `linear-gradient(#ffffff 0.5px, transparent 0.5px), linear-gradient(90deg, #ffffff 0.5px, transparent 0.5px)`,
              backgroundSize: "35px 35px",
            }}
          ></div>
        </div>
      </div>

      {/* Scroll Tracer */}
      <motion.div
        className="fixed left-4 top-0 bottom-0 w-1 origin-top z-50"
        style={{ 
          scaleY: scroller,
          background: 'linear-gradient(to bottom, #6366f1, #8b5cf6, #d946ef)',
          opacity: 0.5
        }}
      >
        <motion.div 
          className="absolute top-0 left-1/2 -translate-x-1/2 w-4 h-4 rounded-full bg-gradient-to-r from-[#6366f1] via-[#8b5cf6] to-[#d946ef] shadow-[0_0_20px_8px_rgba(99,102,241,0.3)]"
          animate={{
            scale: [1, 1.2, 1],
            opacity: [0.5, 1, 0.5],
            boxShadow: [
              "0 0 20px 8px rgba(99,102,241,0.3)",
              "0 0 30px 12px rgba(139,92,246,0.4)",
              "0 0 20px 8px rgba(99,102,241,0.3)"
            ]
          }}
          transition={{
            duration: 2,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        >
          <motion.div
            className="absolute inset-0 rounded-full"
            animate={{
              scale: [1, 1.5, 1],
              opacity: [0.3, 0, 0.3],
              background: "radial-gradient(circle, rgba(99,102,241,0.5) 0%, rgba(139,92,246,0) 70%)"
            }}
            transition={{
              duration: 2,
              repeat: Infinity,
              ease: "easeInOut",
              delay: 0.5
            }}
          />
        </motion.div>
      </motion.div>

      {/* Main Content */}
      <div className="relative z-10">
      {/* Navbar */}
        <nav
        className={`fixed w-full z-50 transition-all duration-300 ${
            isScrolled ? "bg-black/20 backdrop-blur-lg shadow-lg rounded-full" : "bg-transparent"
        }`}
      >
          <div className="container mx-auto px-6 py-4">
            <div className="flex items-center justify-between">
          <div className="flex items-center">
                <img 
                  src="/compendium-transparent.png" 
                  alt="Compendium" 
                  className="h-12 w-auto"
                />
          </div>
              <div className="hidden md:flex items-center space-x-8 font-['Inter']">
                <Link
                  to="home"
                spy={true}
                smooth={true}
                duration={500}
                  className="text-white hover:text-[#8483ec] cursor-pointer transition-colors"
                >
                  Home
                </Link>
                <Link
                  to="about"
                  spy={true}
                  smooth={true}
                  duration={500}
                  className="text-white hover:text-[#8483ec] cursor-pointer transition-colors"
                >
                  About Us
                </Link>
                <Link
                  to="testimonials"
                  spy={true}
                  smooth={true}
                  duration={500}
                  className="text-white hover:text-[#8483ec] cursor-pointer transition-colors"
                >
                  Testimonials
                </Link>
                <Link
                  to="pricing"
                  spy={true}
                  smooth={true}
                  duration={500}
                  className="text-white hover:text-[#8483ec] cursor-pointer transition-colors"
                >
                  Pricing
                </Link>
                <Link
                  to="faq"
                    spy={true}
                    smooth={true}
                    duration={500}
                  className="text-white hover:text-[#8483ec] cursor-pointer transition-colors"
                >
                  FAQs
                </Link>
                <Link
                  to="forum"
                  spy={true}
                  smooth={true}
                  duration={500}
                  className="text-white hover:text-[#8483ec] cursor-pointer transition-colors"
                >
                  Discussion Forum
                </Link>
                <Link
                  to="contact"
                  spy={true}
                  smooth={true}
                  duration={500}
                  className="text-white hover:text-[#8483ec] cursor-pointer transition-colors"
                >
                  Contact Us
                </Link>
              </div>
              <div>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={handleViewProduct}
                  className="bg-gradient-to-r from-[#6366f1] to-[#8b5cf6] px-6 py-2 rounded-full font-medium shadow-[0_0_15px_rgba(99,102,241,0.5)] hover:shadow-[0_0_25px_rgba(139,92,246,0.7)] transition-shadow text-white font-['Inter']"
                >
                  View Our Product
                </motion.button>
              </div>
            </div>
          </div>
        </nav>

      {/* Hero Section */}
        <section ref={heroRef} className="relative h-screen flex items-center justify-center overflow-hidden">
          {/* Animated background elements */}
          <motion.div 
            className="absolute inset-0 z-0"
            style={{ 
              y: useTransform(scrollYProgress, [0, 1], [0, -100])
            }}
          >
            {/* Floating gradients */}
          <motion.div 
              animate={{
                x: [0, 10, 0],
                y: [0, -15, 0],
                opacity: [0.4, 0.6, 0.4],
              }}
              transition={{ repeat: Number.POSITIVE_INFINITY, duration: 8, ease: "easeInOut" }}
              className="absolute top-1/4 left-1/4 w-[400px] h-[400px] rounded-full bg-gradient-to-r from-[#6366f1]/20 to-[#d946ef]/20 blur-3xl"
            ></motion.div>
            <motion.div
              animate={{
                x: [0, -20, 0],
                y: [0, 20, 0],
                opacity: [0.3, 0.5, 0.3],
              }}
              transition={{ repeat: Number.POSITIVE_INFINITY, duration: 10, ease: "easeInOut", delay: 1 }}
              className="absolute bottom-1/4 right-1/4 w-[500px] h-[500px] rounded-full bg-gradient-to-r from-[#8b5cf6]/20 to-[#6366f1]/20 blur-3xl"
            ></motion.div>

            {/* Grid lines */}
            <div
              className="absolute inset-0 opacity-[0.03]"
            style={{ 
                backgroundImage: `linear-gradient(#ffffff 0.5px, transparent 0.5px), linear-gradient(90deg, #ffffff 0.5px, transparent 0.5px)`,
                backgroundSize: "35px 35px",
            }}
            ></div>
          </motion.div>
          
              <motion.div
            style={{ 
              opacity, 
              scale, 
              y,
              x: useTransform(scrollYProgress, [0, 1], [0, 100])
            }} 
            className="container mx-auto px-6 z-10 text-center"
          >
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
              className="max-w-4xl mx-auto"
            >
              <Typewriter text="Where Shared Links Live Forever" className="text-5xl md:text-7xl font-bold mb-6 leading-tight tracking-tight text-center" />
              <motion.p 
                className="text-xl md:text-2xl text-gray-300 mb-10 max-w-3xl"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 1 }}
              >
                Compendium helps communities organize and retrieve shared knowledge with ease.
              </motion.p>
              <motion.div
                className="flex flex-col sm:flex-row justify-center gap-4"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 1.2 }}
              >
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={handleGetStarted}
                  className="bg-[#8483ec] px-8 py-4 rounded-full text-lg font-medium shadow-[0_0_20px_rgba(132,131,236,0.5)] hover:shadow-[0_0_30px_rgba(132,131,236,0.7)] transition-shadow font-['Inter']"
                >
                  Get Started For Free
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={handleViewProduct}
                  className="bg-transparent border-2 border-white px-8 py-4 rounded-full text-lg font-medium hover:bg-white/10 transition-colors font-['Inter']"
                >
                  View Our Product
                </motion.button>
              </motion.div>
            </motion.div>
              </motion.div>
              
          <div className="absolute bottom-10 left-1/2 -translate-x-1/2 z-10">
            <Link to="about" spy={true} smooth={true} duration={500} className="cursor-pointer">
              <motion.div animate={{ y: [0, 10, 0] }} transition={{ repeat: Number.POSITIVE_INFINITY, duration: 1.5 }}>
                <svg
                  className="w-10 h-10 text-white/70"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
                </svg>
              </motion.div>
            </Link>
            </div>
        </section>
      
      {/* About Section */}
        <section ref={aboutRef} className="py-20 relative">
          <motion.div
            variants={fadeInUp}
            initial="hidden"
            animate={aboutInView ? "visible" : "hidden"}
            className="max-w-4xl mx-auto px-12"
          >
            <h2 className="text-4xl font-bold mb-6 text-left">
              Built for <span className="text-[#8483ec]">Communities</span>, by a{" "}
              <span className="text-[#8483ec]">Community</span>
            </h2>
            <p className="text-xl text-gray-300 mb-10 leading-relaxed max-w-3xl mx-auto text-left">
              Compendium was born out of a simple problem faced in every WhatsApp or online group—shared links get lost
              in endless chats. We built a centralized tool that stores, categorizes, and intelligently retrieves links
              so knowledge never gets buried again.
            </p>
          </motion.div>
        </section>
      
      {/* Features Section */}
        <section ref={featuresRef} className="py-20 relative">
          <motion.div
            variants={fadeInUp}
            initial="hidden"
            animate={featuresInView ? "visible" : "hidden"}
            className="mb-16 px-12"
          >
            <h2 className="text-4xl font-bold mb-8 text-left">
              Powerful <span className="text-[#8483ec]">Features</span>
            </h2>
            <p className="text-xl text-gray-300 max-w-3xl  mb-6 text-left">
              Compendium comes packed with tools designed to make knowledge sharing and retrieval effortless.
            </p>
          </motion.div>
          
          <motion.div
            className="grid md:grid-cols-2 gap-10 px-12"
            variants={staggerContainer}
            initial="hidden"
            animate={featuresInView ? "visible" : "hidden"}
          >
            {features.map((feature, index) => (
              <motion.div
                key={index}
                variants={fadeInUp}
                whileHover={{ y: -10, boxShadow: "0 0 30px rgba(132, 131, 236, 0.3)" }}
                className="bg-[#0f0f0f] p-8 rounded-2xl border border-[#8483ec]/20 transition-all duration-300"
              >
                <div className="text-[#8483ec] mb-4">{feature.icon}</div>
                <h3 className="text-2xl font-bold mb-4">{feature.title}</h3>
                <p className="text-gray-300">{feature.description}</p>
              </motion.div>
            ))}
          </motion.div>
        </section>
      
      {/* Testimonials Section */}
        <section ref={testimonialsRef} className="py-20 relative overflow-hidden">
          <motion.div
            variants={fadeInUp}
            initial="hidden"
            animate={testimonialsInView ? "visible" : "hidden"}
            className="mb-16 px-12"
          >
            <h2 className="text-4xl font-bold mb-6 text-left">
              What Our <span className="text-[#8483ec]">Users Say</span>
            </h2>
            <p className="text-xl text-gray-300 max-w-3xl  mb-6  text-left">
              Don't just take our word for it. Here's what people are saying about Compendium.
            </p>
          </motion.div>
          
          <motion.div
            className="flex gap-6 py-10 overflow-visible"
            animate={{ x: ["0%", "-100%"] }}
            transition={{
              repeat: Number.POSITIVE_INFINITY,
              repeatType: "loop",
              duration: 30,
              ease: "linear",
            }}
          >
            {[...testimonials, ...testimonials].map((testimonial, index) => (
              <motion.div
                key={index}
                whileHover={{ y: -10, scale: 1.03 }}
                className="min-w-[350px] bg-[#0f0f0f]/40 backdrop-blur-lg p-8 rounded-2xl border border-[#8483ec]/20 flex flex-col"
              >
                <div className="flex-1">
                  <p className="text-xl italic text-gray-300 mb-6">"{testimonial.text}"</p>
                          </div>
                <div>
                  <h4 className="text-lg font-bold">{testimonial.name}</h4>
                  <p className="text-[#8483ec]">{testimonial.title}</p>
                        </div>
              </motion.div>
            ))}
          </motion.div>
        </section>
      
      {/* Pricing Section */}
        <section ref={pricingRef} className="py-20 relative">
          <motion.div
            variants={fadeInUp}
            initial="hidden"
            animate={pricingInView ? "visible" : "hidden"}
            className="mb-16 px-6 text-center"
          >
            <h2 className="text-4xl font-bold mb-6 pl-8 text-left">
  Choose the Right{" "}
  <span className="text-[#8483ec]">Plan for You</span>
</h2>

            <p className="text-xl text-gray-300 max-w-3xl mb-6 pl-10 text-left">
              Choose the plan that works best for your team. All plans include core features.
            </p>
          </motion.div>
          
          <motion.div
            className="grid md:grid-cols-3 gap-8 max-w-5xl mx-auto"
            variants={staggerContainer}
            initial="hidden"
            animate={pricingInView ? "visible" : "hidden"}
          >
            {pricingPlans.map((plan, index) => (
              <motion.div
                key={index}
                variants={fadeInUp}
                whileHover={{ y: -10 }}
                className={`bg-[#0f0f0f] rounded-2xl overflow-hidden ${
                  plan.popular 
                    ? "border-2 border-[#8483ec] shadow-[0_0_30px_rgba(132,131,236,0.3)]"
                    : "border border-[#8483ec]/20"
                }`}
              >
                {plan.popular && <div className="bg-[#8483ec] text-center py-2 font-medium">Most Popular</div>}
                <div className="p-8">
                  <h3 className="text-2xl font-bold mb-2">{plan.name}</h3>
                <div className="mb-6">
                    <span className="text-4xl font-bold">{plan.price}</span>
                    <span className="text-gray-400">/{plan.period}</span>
                </div>
                  <ul className="mb-8 space-y-4">
                  {plan.features.map((feature, i) => (
                      <li key={i} className="flex items-center">
                        <svg
                          className="w-5 h-5 text-[#8483ec] mr-3"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                      <span className="text-gray-300">{feature}</span>
                    </li>
                  ))}
                </ul>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                    className={`w-full py-3 rounded-lg font-medium ${
                      plan.popular ? "bg-[#8483ec] text-white" : "bg-white/10 text-white hover:bg-white/20"
                  }`}
                >
                  {plan.cta}
                </motion.button>
                </div>
              </motion.div>
            ))}
          </motion.div>
        </section>
      
      {/* FAQ Section */}
        <section ref={faqRef} className="py-20 relative">
          <motion.div
            variants={fadeInUp}
            initial="hidden"
            animate={faqInView ? "visible" : "hidden"}
            className="mb-16 px-6 text-center"
          >
            <h2 className="text-4xl font-bold mb-6 ml- 4 pl-6 text-left">
              Frequently Asked <span className="text-[#8483ec]">Questions</span>
            </h2>
            <p className="text-xl text-gray-300 max-w-6xl ml-4 pl-6 mx-auto">
               Got Questions? Answers below. Still need help? Our team's just a click away.
            </p>
          </motion.div>
          
          <div className="max-w-3xl mx-auto">
            {faqs.map((faq, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                viewport={{ once: true }}
                className="mb-4"
              >
                <button
                  onClick={() => toggleAccordion(index)}
                  className={`flex justify-between items-center w-full p-5 text-left bg-[#0f0f0f] rounded-lg ${
                    activeIndex === index ? "rounded-b-none border-b border-[#8483ec]/30" : ""
                  } border border-[#8483ec]/20`}
                >
                  <span className="text-lg font-medium">{faq.question}</span>
                  <svg
                    className={`w-6 h-6 text-[#8483ec] transition-transform ${activeIndex === index ? "transform rotate-180" : ""}`}
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
                    <motion.div
                  initial={false}
                  animate={{
                    height: activeIndex === index ? "auto" : 0,
                    opacity: activeIndex === index ? 1 : 0,
                  }}
                      transition={{ duration: 0.3 }}
                  className="overflow-hidden bg-[#0f0f0f]/50 rounded-b-lg border-x border-b border-[#8483ec]/20"
                    >
                  <div className="p-5 text-gray-300">{faq.answer}</div>
                    </motion.div>
              </motion.div>
            ))}
        </div>
        </section>
      
        {/* Discussion Forum Section */}
        <section ref={forumRef} className="py-20 relative">
          <motion.div
            variants={fadeInUp}
            initial="hidden"
            animate={forumInView ? "visible" : "hidden"}
            className="mb-16 px-6 text-center"
          >
            <h2 className="text-4xl font-bold mb-6 ml- 4 pl-6 text-left">
              Community <span className="text-[#8483ec]">Discussion</span>
            </h2>
            <p className="text-xl text-gray-300 max-w-4xl mx-auto ml- 4 pl-4 text-left">
              Join the conversation and share your experiences with Compendium.
            </p>
          </motion.div>

          <motion.div
            className="max-w-4xl mx-auto grid gap-6"
            variants={staggerContainer}
            initial="hidden"
            animate={forumInView ? "visible" : "hidden"}
          >
            {forumTopics.map((topic, index) => (
              <motion.div
                key={index}
                variants={fadeInUp}
                className="bg-[#0f0f0f]/40 backdrop-blur-lg rounded-2xl border border-[#8483ec]/20 transition-all duration-300"
              >
                <div 
                  className="p-6 cursor-pointer"
                  onClick={() => toggleTopic(index)}
                >
                  <div className="flex justify-between items-start">
                  <div>
                      <h3 className="text-xl font-bold mb-2">{topic.title}</h3>
                      <div className="flex items-center space-x-4 text-gray-400">
                        <span>by {topic.author}</span>
                        <span>•</span>
                        <span>{topic.replies} replies</span>
                        <span>•</span>
                        <span>{topic.lastActivity}</span>
                  </div>
                    </div>
                    <span className="px-3 py-1 bg-[#8483ec]/20 text-[#8483ec] rounded-full text-sm">
                      {topic.category}
                    </span>
                  </div>
                  <p className="mt-4 text-gray-300">{topic.content}</p>
                </div>
                
                {expandedTopic === index && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    transition={{ duration: 0.3 }}
                    className="border-t border-[#8483ec]/20"
                  >
                    <div className="p-6 space-y-4">
                      {topic.repliesList.map((reply, replyIndex) => (
                        <div key={replyIndex} className="bg-[#0f0f0f]/60 p-4 rounded-lg">
                          <div className="flex justify-between items-start mb-2">
                            <span className="font-medium text-[#8483ec]">{reply.author}</span>
                            <span className="text-sm text-gray-400">{reply.time}</span>
                          </div>
                          <p className="text-gray-300">{reply.content}</p>
                          <div className="flex items-center mt-2 text-sm text-gray-400">
                            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                            </svg>
                            {reply.likes}
                          </div>
                        </div>
                      ))}
                      {newReplies[index]?.map((reply, replyIndex) => (
                        <div key={`new-${replyIndex}`} className="bg-[#0f0f0f]/60 p-4 rounded-lg">
                          <div className="flex justify-between items-start mb-2">
                            <span className="font-medium text-[#8483ec]">{reply.author}</span>
                            <span className="text-sm text-gray-400">{reply.time}</span>
                          </div>
                          <p className="text-gray-300">{reply.content}</p>
                          <div className="flex items-center mt-2 text-sm text-gray-400">
                            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                            </svg>
                            {reply.likes}
                          </div>
                        </div>
                      ))}
                      <div className="flex items-center space-x-4 mt-4">
                        <input
                          type="text"
                          value={replyInputs[index] || ""}
                          onChange={(e) => handleReplyChange(index, e.target.value)}
                          placeholder="Write a reply..."
                          className="flex-1 bg-[#0f0f0f]/60 text-white px-4 py-2 rounded-lg border border-[#8483ec]/20 focus:border-[#8483ec] outline-none"
                        />
                        <button 
                          onClick={() => handleAddReply(index)}
                          className="bg-[#8483ec] px-4 py-2 rounded-lg text-white hover:bg-[#8483ec]/90 transition-colors"
                        >
                          Reply
                        </button>
                      </div>
                    </div>
                  </motion.div>
                )}
              </motion.div>
            ))}
            </motion.div>
            
            <motion.div 
            className="text-center mt-10"
            variants={fadeInUp}
            initial="hidden"
            animate={forumInView ? "visible" : "hidden"}
          >
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="bg-[#8483ec] px-8 py-3 rounded-full text-lg font-medium shadow-[0_0_20px_rgba(132,131,236,0.5)] hover:shadow-[0_0_30px_rgba(132,131,236,0.7)] transition-shadow"
            >
              Start New Discussion
            </motion.button>
          </motion.div>
        </section>

        {/* Contact Section */}
        <section ref={contactRef} className="py-20 relative">
          <motion.div
            variants={fadeInUp}
            initial="hidden"
            animate={contactInView ? "visible" : "hidden"}
            className="mb-16 px-6 text-center"
          >
            <h2 className="text-4xl font-bold mb-6">
              Get In <span className="text-[#8483ec]">Touch</span>
            </h2>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              Have questions or want to learn more? Reach out to our team and we'll get back to you as soon as possible.
            </p>
          </motion.div>

          <div className="max-w-3xl mx-auto">
            <motion.form
              className="space-y-6"
              variants={fadeInUp}
              initial="hidden"
              animate={contactInView ? "visible" : "hidden"}
            >
              <div className="grid md:grid-cols-2 gap-6">
              <div>
  <label
    htmlFor="name"
    className="block mb-2 text-sm font-medium text-white"
  >
    Your Name
  </label>
  <input
    type="text"
    id="name"
    name="name"
    autoComplete="off"
    className="w-full p-3 bg-[#0f0f0f] rounded-lg border border-[#8483ec]/20 focus:ring-[#8483ec] focus:border-[#8483ec] outline-none transition-colors text-white placeholder-gray-400"
    required
    placeholder="Enter your full name"
  />
</div>

                <div>
  <label
    htmlFor="email"
    className="block mb-2 text-sm font-medium text-white"
  >
    Your Email
  </label>
  <input
    type="email"
    id="email"
    name="email"
    autoComplete="off"
    className="w-full p-3 bg-[#0f0f0f] rounded-lg border border-[#8483ec]/20 focus:ring-[#8483ec] focus:border-[#8483ec] outline-none transition-colors text-white placeholder-gray-400"
    required
    placeholder="you@example.com"
  />
</div>

              </div>
                <div>
                <label htmlFor="message" className="block mb-2 text-sm font-medium">
                  Your Message
                  </label>
                  <textarea
                  id="message"
                  rows={6}
                  className="w-full p-3 bg-[#0f0f0f] rounded-lg border border-[#8483ec]/20 focus:ring-[#8483ec] focus:border-[#8483ec] outline-none transition-colors"
                  required
                ></textarea>
                </div>
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                type="submit"
                className="w-full py-3 bg-[#8483ec] rounded-lg font-medium shadow-[0_0_15px_rgba(132,131,236,0.3)] hover:shadow-[0_0_25px_rgba(132,131,236,0.5)] transition-shadow"
                >
                  Send Message
                </motion.button>
            </motion.form>

            <motion.div
              className="flex justify-center mt-10 space-x-6"
              variants={fadeInUp}
              initial="hidden"
              animate={contactInView ? "visible" : "hidden"}
              transition={{ delay: 0.3 }}
            >
              <motion.a href="#" whileHover={{ y: -5, color: "#8483ec" }} className="text-white transition-colors">
                <svg className="h-8 w-8" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                  <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
                </svg>
              </motion.a>
              <motion.a href="#" whileHover={{ y: -5, color: "#8483ec" }} className="text-white transition-colors">
                <svg className="h-8 w-8" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                  <path
                    fillRule="evenodd"
                    d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z"
                    clipRule="evenodd"
                  />
                </svg>
              </motion.a>
              <motion.a href="#" className="text-gray-400 hover:text-[#8483ec] transition-colors">
                <svg className="h-8 w-8" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                  <path
                    fillRule="evenodd"
                    d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"
                    clipRule="evenodd"
                  />
                </svg>
              </motion.a>
          </motion.div>
        </div>
        </section>
      </div>

      {/* Footer Section */}
      <footer className="py-12 bg-black/20 backdrop-blur-lg border-t border-[#8483ec]/20">
        <div className="max-w-6xl mx-auto px-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div className="text-center md:text-left">
              <img 
                src="/compendium-transparent.png" 
                alt="Compendium" 
                className="h-12 w-auto mx-auto md:mx-0 mb-4"
              />
              <p className="text-gray-400">
                Where shared links live forever.
              </p>
            </div>
            <div>
              <h3 className="text-lg font-semibold mb-4 text-white">Product</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-gray-400 hover:text-[#8483ec] transition-colors">Features</a></li>
                <li><a href="#" className="text-gray-400 hover:text-[#8483ec] transition-colors">Pricing</a></li>
                <li><a href="#" className="text-gray-400 hover:text-[#8483ec] transition-colors">Documentation</a></li>
              </ul>
            </div>
            <div>
              <h3 className="text-lg font-semibold mb-4 text-white">Company</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-gray-400 hover:text-[#8483ec] transition-colors">About</a></li>
                <li><a href="#" className="text-gray-400 hover:text-[#8483ec] transition-colors">Blog</a></li>
                <li><a href="#" className="text-gray-400 hover:text-[#8483ec] transition-colors">Careers</a></li>
              </ul>
            </div>
            <div>
              <h3 className="text-lg font-semibold mb-4 text-white">Legal</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-gray-400 hover:text-[#8483ec] transition-colors">Privacy</a></li>
                <li><a href="#" className="text-gray-400 hover:text-[#8483ec] transition-colors">Terms</a></li>
                <li><a href="#" className="text-gray-400 hover:text-[#8483ec] transition-colors">Contact</a></li>
              </ul>
            </div>
          </div>
          <div className="mt-12 pt-8 border-t border-[#8483ec]/20 text-center">
            <p className="text-gray-400">
              © {new Date().getFullYear()} Compendium. All rights reserved.
            </p>
          </div>
        </div>
      </footer>

      {/* Font Import */}
      <style jsx global>{`
        @import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@400;500;600;700&display=swap');
        
        body {
          font-family: 'IBM Plex Mono', monospace;
        }
      `}</style>
    </div>
  )
}

export default LandingPage;


================================================
File: src/components/ui/button.css
================================================
/* Define the animation for the border */
@keyframes borderEffect {
  0% { border-color: #8182ed; }
  50% { border-color: #8182ed; }
  100% { border-color: #8182ed; }
}

.button {
  /* Base styles */
  background-color: #000; /* Black background */
  color: #fff; /* White text for contrast */
  border: 1px solid transparent; /* Thinner border */
  border-radius: 9999px; /* Fully rounded */
  padding: 0.5rem 1rem; /* Smaller padding */
  font-size: 0.875rem; /* Smaller font size */
  font-weight: 500;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  transition: all 0.3s ease-in-out;
  position: relative;
  overflow: hidden;
  margin-right: 0.5rem; /* Add margin for spacing between buttons */

  /* Border animation */
  animation: borderEffect 3s linear infinite; /* Apply border animation */
}

.button:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.2), 0 2px 4px rgba(0, 0, 0, 0.1);
}

.button:focus {
  outline: none;
  box-shadow: 0 0 0 2px rgba(129, 130, 237, 0.4); /* Focus ring with accent color */
}

.button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  border-color: #555; /* Grey border for disabled state */
  animation: none; /* Stop animation */
}



================================================
File: src/components/ui/button.jsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import "./button.css"

const Button = React.forwardRef(({ className, variant = "default", size = "default", asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      className={`button button-${variant} button-${size} ${className}`}
      ref={ref}
      {...props} />
  );
})
Button.displayName = "Button"

export { Button }



================================================
File: src/components/ui/dialog.css
================================================
.fixedOverlay {
    position: fixed;
    inset: 0;
    z-index: 50;
    background-color: rgba(0, 0, 0, 0.8);
  }
  
  .dialogContent {
    position: fixed;
    left: 50%;
    top: 50%;
    z-index: 50;
    display: grid;
    width: 100%;
    max-width: 32rem;
    transform: translate(-50%, -50%);
    gap: 1rem;
    border: 1px solid;
    background-color: #ffffff; 
    padding: 1.5rem;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    border-radius: 0; 
  }
  
  @media (min-width: 640px) {
    .dialogContent {
      border-radius: 0.5rem;
    }
  }
  
  
  .dialogCloseButton {
    position: absolute;
    right: 1rem;
    top: 1rem;
    border-radius: 0.125rem;
    opacity: 0.7;
    transition-property: opacity;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
    background-color: transparent; 
    color: inherit; 
  }
  
  .dialogCloseButton:hover {
    opacity: 1;
  }
  
  .dialogCloseButton:focus {
    outline: 2px solid transparent;
    outline-offset: 2px;
    border-width: 2px;
    border-style: solid;
    
  }
  
  .dialogCloseButton:disabled {
    pointer-events: none;
  }
  
  [data-state="open"] > .dialogCloseButton {
    background-color: #cccccc; 
    color: #888888; 
  }
  
  
  .dialogHeader {
    display: flex;
    flex-direction: column;
    row-gap: 0.375rem;
    text-align: center;
  }
  
  @media (min-width: 640px) {
    .dialogHeader {
      text-align: left;
    }
  }
  
  .dialogFooter {
    display: flex;
    flex-direction: column-reverse;
  }
  
  @media (min-width: 640px) {
    .dialogFooter {
      flex-direction: row;
      justify-content: flex-end;
      column-gap: 0.5rem;
    }
  }
  
  
  .dialogTitle {
    font-size: 1.125rem;
    line-height: 1;
    font-weight: 600;
    letter-spacing: -0.025em;
  }
  
  .dialogDescription {
    font-size: 0.875rem;
    color: #888888; 
  }
  



================================================
File: src/components/ui/dialog.jsx
================================================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

// import { cn } from "@/lib/utils" // removed cn import

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={`fixedOverlay ${className || ""}`} // replaced cn with template literal
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={`dialogContent ${className || ""}`} // replaced cn with template literal
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="dialogCloseButton"> {/* replaced cn with classname */}
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal >
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={`dialogHeader ${className || ""}`} // replaced cn with template literal
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={`dialogFooter ${className || ""}`} // replaced cn with template literal
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={`dialogTitle ${className || ""}`} // replaced cn with template literal
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={`dialogDescription ${className || ""}`} // replaced cn with template literal
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};





================================================
File: src/components/ui/hover-border-gradient.jsx
================================================
import React, { useState, useEffect } from "react";
import { motion } from "framer-motion"; // Correct import for motion component
import { cn } from "@/lib/utils";

export function HoverBorderGradient({
  children,
  containerClassName,
  className,
  as: Tag = "button",
  duration = 1.5, // Slow down rotation slightly
  clockwise = true,
  ...props
}) {
  const [hovered, setHovered] = useState(false);
  const [direction, setDirection] = useState("TOP");

  const rotateDirection = (currentDirection) => {
    const directions = ["TOP", "LEFT", "BOTTOM", "RIGHT"];
    const currentIndex = directions.indexOf(currentDirection);
    const nextIndex = clockwise
      ? (currentIndex - 1 + directions.length) % directions.length
      : (currentIndex + 1) % directions.length;
    return directions[nextIndex];
  };

  // Use a very faint grey for the constantly rotating gradient
  const movingMap = {
    TOP: "radial-gradient(20.7% 50% at 50% 0%, hsl(0, 0%, 100%, 0.1) 0%, rgba(255, 255, 255, 0) 100%)",
    LEFT: "radial-gradient(16.6% 43.1% at 0% 50%, hsl(0, 0%, 100%, 0.1) 0%, rgba(255, 255, 255, 0) 100%)",
    BOTTOM: "radial-gradient(20.7% 50% at 50% 100%, hsl(0, 0%, 100%, 0.1) 0%, rgba(255, 255, 255, 0) 100%)",
    RIGHT: "radial-gradient(16.2% 41.19% at 100% 50%, hsl(0, 0%, 100%, 0.1) 0%, rgba(255, 255, 255, 0) 100%)",
  };

  // Keep the brighter purple highlight for hover
  const highlight =
    "radial-gradient(75% 181.15% at 50% 50%, #8a2be2 0%, rgba(0, 0, 0, 0) 100%)"; // Purple: #8a2be2

  useEffect(() => {
    // Remove the !hovered check to make the interval run constantly
    const interval = setInterval(() => {
      setDirection((prevState) => rotateDirection(prevState));
    }, duration * 1000);
    return () => clearInterval(interval);
    // Dependencies remain the same, but the effect runs regardless of hover state
  }, [duration, clockwise]);

  return (
    <Tag
      onMouseEnter={(event) => {
        setHovered(true);
      }}
      onMouseLeave={() => setHovered(false)}
      className={cn(
        "relative flex rounded-full border border-transparent dark:border-white/[0.2] content-center bg-black/95 hover:bg-black transition-colors duration-300 items-center flex-col flex-nowrap gap-10 h-min justify-center overflow-visible p-px decoration-clone w-fit",
        containerClassName // This applies classes to the outer container
      )}
      {...props} // Passes props like onClick, disabled to the underlying Tag (button)
    >
      <div
        className={cn(
          "text-white z-10 bg-black px-4 py-2 rounded-[inherit]",
          "text-sm", // Reduced font size using Tailwind class
          "font-mono", // Apply monospace font (Tailwind class)
          className
        )}
        style={{ fontFamily: 'IBM Plex Mono, monospace' }} // Explicit font family
      >
        {children}
      </div>
      <motion.div
        className={cn(
          "flex-none inset-0 overflow-hidden absolute z-0 rounded-[inherit]"
        )}
        style={{
          filter: "blur(3px)", // Slightly increased blur
          position: "absolute",
          width: "100%",
          height: "100%",
        }}
        initial={{ background: movingMap[direction] }}
        animate={{
          background: hovered
            ? [movingMap[direction], highlight] // On hover, transition to purple
            : movingMap[direction], // Otherwise, stay with the subtle rotating grey
        }}
        transition={{ ease: "linear", duration: duration ?? 1.5 }}
      />
      {/* The inner black background */}
      <div className="bg-black absolute z-1 flex-none inset-[2px] rounded-full" />
    </Tag>
  );
}

// Added export default for convenience if needed elsewhere, or keep as named export
// export default HoverBorderGradient;



================================================
File: src/components/ui/input.css
================================================
.input {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #444; /* Subtle border */
  border-radius: 8px;
  background-color: #1a1a1a; /* Dark background */
  color: #fff; /* White text */
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
  font-family: 'IBM Plex Mono', monospace;
}

.input:focus {
  border-color: #8182ed; /* Accent color on focus */
  box-shadow: 0 0 0 3px rgba(129, 130, 237, 0.3); /* Focus ring */
  outline: none;
}



================================================
File: src/components/ui/input.jsx
================================================
import * as React from "react"
import "./input.css"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    (<input
      type={type}
      className={`input ${className || ""}`}
      ref={ref}
      {...props} />)
  );
})
Input.displayName = "Input"

export { Input }



================================================
File: src/components/ui/loader.css
================================================
.loader-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh; /* Full viewport height */
  background-color: #000; /* Black background */
}

.loader {
  color: #8182ed; /* Accent color */
  font-size: 1.5rem;
  font-weight: bold;
} 


================================================
File: src/components/ui/loader.jsx
================================================
import React from 'react';
import styled from 'styled-components';

const Loader = () => {
  return (
    <StyledWrapper>
      <div className="loader">
        <div className="load-inner load-one" />
        <div className="load-inner load-two" />
        <div className="load-inner load-three" />
        <span className="text">Loading...</span>
      </div>
    </StyledWrapper>
  );
}

const StyledWrapper = styled.div`
  .loader {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100px;
    height: 100px;
    margin: 130px 0;
    perspective: 780px;
  }

  .text {
    font-size: 20px;
    font-weight: 700;
    color: #cecece;
    z-index: 10;
  }

  .load-inner {
    position: absolute;
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    border-radius: 50%;
  }

  .load-inner.load-one {
    left: 0%;
    top: 0%;
    border-bottom: 3px solid #5c5edc;
    animation: rotate1 1.15s linear infinite;
  }

  .load-inner.load-two {
    right: 0%;
    top: 0%;
    border-right: 3px solid #9147ff;
    animation: rotate2 1.15s 0.1s linear infinite;
  }

  .load-inner.load-three {
    right: 0%;
    bottom: 0%;
    border-top: 3px solid #3b82f6;
    animation: rotate3 1.15s 0.15s linear infinite;
  }

  @keyframes rotate1 {
    0% {
      transform: rotateX(45deg) rotateY(-45deg) rotateZ(0deg);
    }
    100% {
      transform: rotateX(45deg) rotateY(-45deg) rotateZ(360deg);
    }
  }
  @keyframes rotate2 {
    0% {
      transform: rotateX(45deg) rotateY(45deg) rotateZ(0deg);
    }
    100% {
      transform: rotateX(45deg) rotateY(45deg) rotateZ(360deg);
    }
  }
  @keyframes rotate3 {
    0% {
      transform: rotateX(-60deg) rotateY(0deg) rotateZ(0deg);
    }
    100% {
      transform: rotateX(-60deg) rotateY(0deg) rotateZ(360deg);
    }
  }`;

export default Loader;



================================================
File: src/components/ui/select.css
================================================
.select-trigger {
  display: inline-flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #444; /* Subtle border */
  border-radius: 8px;
  background-color: #1a1a1a; /* Dark background */
  color: #fff; /* White text */
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
  font-family: 'IBM Plex Mono', monospace;
  cursor: pointer;
}

.select-trigger:focus {
  border-color: #8182ed; /* Accent color on focus */
  box-shadow: 0 0 0 3px rgba(129, 130, 237, 0.3); /* Focus ring */
  outline: none;
}

.select-content {
  background-color: #1a1a1a; /* Dark background */
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.select-item {
  padding: 0.75rem 1rem;
  color: #fff; /* White text */
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.select-item:hover {
  background-color: #333; /* Highlight item on hover */
}



================================================
File: src/components/ui/select.jsx
================================================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}>
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}>
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn("p-1", position === "popper" &&
          "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]")}>
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props} />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



================================================
File: src/components/ui/table.css
================================================
.table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 1rem;
  background-color: #1a1a1a; /* Dark background */
  border-radius: 8px;
  overflow: hidden;
}

.table th, .table td {
  padding: 0.75rem 1rem;
  text-align: left;
  color: #fff; /* White text */
  border-bottom: 1px solid #333; /* Subtle border */
}

.table th {
  background-color: #2a2a2a; /* Slightly darker for header */
  font-weight: 600;
}

.table tr:hover {
  background-color: #333; /* Highlight row on hover */
}

.table .no-results {
  text-align: center;
  color: #888; /* Grey text for no results */
}



================================================
File: src/components/ui/table.jsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props} />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props} />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)}
    {...props} />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props} />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props} />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props} />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props} />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



================================================
File: src/components/ui/.DS_Store
================================================
[Non-text file]


================================================
File: src/lib/utils.js
================================================
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}




